{"title":"Data Preparation","markdown":{"yaml":{"title":"Data Preparation","format":"html","execute":{"echo":true,"warning":false,"message":false}},"headingText":"Data preparation for the SDM workshop","containsRefs":false,"markdown":"\n\n\nThis page documents the steps used to **download and save** the datasets used throughout the workshop.\\\nAll workshop pages will simply reload the saved `.RData` file to ensure reproducibility and avoid repeatedly downloading data from online sources (this helps with speed and reduces server load when 30+ students are running the same code *but* for actual research, always use the most up-to-date data!)).\n\n::: {.callout-note collapse=\"true\" icon=\"package\"}\n### Pre-saved data\n\nFor teaching efficiency, the workshop pages use **pre-saved datasets** stored in `/data/`.  \nThis ensures exercises run quickly and consistently without repeatedly downloading large files.\n\nIf you want to reproduce the full workflow, you can re-run the download and cropping steps.  \nBe aware that downloading global rasters and GBIF data may take several minutes.  \n\nFor full reproducibility, the data downloading steps are also documented below.\n\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"package\"}\n### Required R packages for the workshop\n\nMake sure the following packages are **installed and loaded** before proceeding. These will be used throughout the workshop:\n\n-   `terra` — for handling spatial raster and vector data\n-   `geodata` — provides easy access to global climate, topography, land cover and other raster datasets\n-   `sf` — for vector data in simple features format\n-   `rnaturalearth` — for country and world maps\n-   `rnaturalearthdata` — provides Natural Earth vector data (used with `rnaturalearth`)\n-   `spocc` — for accessing species occurrence data from multiple databases\n-   `rgbif` — for GBIF data queries\n-   `ggplot2` — for custom plotting\n-   `viridis` — for color palettes\n-   `tidyverse` — for data manipulation/formatting\n-   `leaflet` — for plotting interactive maps\n-   `CoordinateCleaner` — for cleaning species data\n-   `effects` — visualising model effects\n-   `ggcorrplot` — visualising correlation matrices\n-   `pROC` — analysing and visualising ROC curves\n-   `PresenceAbsence` — evaluating presence-absence model performance\n-   `ecospat` — spatial ecology and species distribution modeling tools\n\nYou can install any missing packages by running:\n\n```{r}\n#| label: packages-install\n#| echo: true\n#| message: false\n#| warning: false\n\n# Set CRAN mirror for non-interactive install\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\n# List of required packages\nrequired_packages <- c(\n  \"terra\", \"geodata\", \"sf\", \"raster\",\n  \"rnaturalearth\", \"rnaturalearthdata\",\n  \"spocc\", \"rgbif\", \"ggplot2\", \"viridis\", \"tidyverse\", \"dplyr\",\n  \"leaflet\", \"CoordinateCleaner\", \"effects\",\n  \"ggcorrplot\", \"caret\", \"pROC\", \"PresenceAbsence\", \"ecospat\",\n  \"mgcv\", \"dismo\", \"gbm\", \"randomForest\", \"maxnet\",\n  \"biomod2\", \"sdm\", \"ENMeval\"\n)\n\n# Identify missing packages\nmissing_packages <- required_packages[!(required_packages %in% rownames(installed.packages()))]\n\n# Install missing packages with dependencies\nif (length(missing_packages) > 0) {\n  suppressWarnings(suppressMessages(\n    install.packages(missing_packages, dependencies = TRUE, quiet = TRUE)\n  ))\n}\n\n# Load all required packages\ninvisible(lapply(required_packages, function(pkg) {\n  suppressWarnings(suppressMessages(\n    library(pkg, character.only = TRUE)\n  ))\n}))\n```\n:::\n\n<br>\n\n### 1. Basemaps\n\n```{r}\n#| label: download-maps\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\n\nif (!file.exists(\"data/workshop_data.RData\")) {\n  # Load country boundaries for the entire world as an sf object\n  World_sf <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n  # Load the United Kingdom boundary as an sf object\n  UK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n  # Load UK administrative regions (states/regions) as an sf object\n  UK_admin_sf <- ne_states(country = \"United Kingdom\", returnclass = \"sf\")\n\n  # Subset the UK administrative regions to only East Wales\n  WalesEast_admin_sf <- UK_admin_sf[UK_admin_sf$region == \"East Wales\", ]\n}\n```\n\n```{r}\n#| label: demo-maps\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n# Load country boundaries for the entire world as an sf object\nWorld_sf <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Load the United Kingdom boundary as an sf object\nUK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n# Load UK administrative regions (states/regions) as an sf object\nUK_admin_sf <- ne_states(country = \"United Kingdom\", returnclass = \"sf\")\n\n# Subset the UK administrative regions to only East Wales\nWalesEast_admin_sf <- UK_admin_sf[UK_admin_sf$region == \"East Wales\", ]\n```\n\n<br>\n\n### 2. Environmental data\n\n```{r}\n#| label: hide-download-envdata\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\nif (!file.exists(\"data/Clim_UK.tif\")) {\n  Clim_extant <- geodata::worldclim_global(var = \"bio\", res = 5, path = \"data/\")\n  Clim_UK <- terra::crop(Clim_extant, UK_sf)\n  terra::writeRaster(Clim_UK, \"data/Clim_UK.tif\", overwrite = TRUE)\n}\n\nif (!file.exists(\"data/Elev_UK.tif\")) {\n  Elev_UK <- geodata::elevation_30s(country = \"GB\", path = \"data/\")\n  terra::writeRaster(Elev_UK, \"data/Elev_UK.tif\", overwrite = TRUE)\n}\n\n\nif (!file.exists(\"data/Clim_cmip6_2041_2060_UK.tif\")) {\n  Clim_cmip6_2041_2060 <- geodata::cmip6_world(var = \"bioc\", ssp = \"126\", model = \"BCC-CSM2-MR\", time = \"2041-2060\", \n                                             res = 5, path = \"data/\")\n  terra::writeRaster(Clim_cmip6_2041_2060_UK, \"data/Clim_cmip6_2041_2060_UK.tif\", overwrite = TRUE)\n}\n```\n\n```{r}\n#| label: demo-envdata\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n# Download WorldClim data\nClim_extant <- geodata::worldclim_global(var = \"bio\", \n                                         res = 5, path = \"data/\")\n\nnames(Clim_extant) <- sub(\"^wc2.1_5m_\", \"\", names(Clim_extant))\n\n# Download elevation data\nElev_UK <- geodata::elevation_30s(country = \"GB\", path = \"data/\")\n\n# Crop climate to UK\nClim_UK <- terra::crop(Clim_extant, UK_sf)\n\n# Crop elevation to UK\nElev_UK <- terra::crop(Elev_UK, UK_sf)\n\n# Download bioclimatic variables for a future scenario\n# Example: CMIP6 data for SSP5-8.5, year 2060, GCM = BCC-CSM2-MR, resolution = 5 arc-min\n# Shared Socioeconomic Pathways (SSPs) code 126: refers to the \"Paris Agreement compatible\" pathway with:\n# SSP1: Sustainability (world shifts toward green growth, equity, and environmental awareness)\n# Radiative forcing stabilizes at 2.6 W/m² by 2100\nClim_cmip6_2041_2060 <- geodata::cmip6_world(var = \"bioc\", ssp = \"126\", model = \"BCC-CSM2-MR\", time = \"2041-2060\", \n                                             res = 5, path = \"data/\")\n\nnames(Clim_cmip6_2041_2060) <- gsub(\"^bio\", \"bio_\", names(Clim_cmip6_2041_2060))\n\n# Crop future climate to UK\nClim_cmip6_2041_2060_UK  <- terra::crop(Clim_extant, UK_sf)\n```\n\n<br>\n\n### 3. Species occurrence data from GBIF\n\n```{r}\n#| label: hide-download-gbif\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\nif (!file.exists(\"data/workshop_data.RData\")) {\n  ####\n  # Focal species for the SDM workshop\n  species_name <- \"Rhinolophus hipposideros\"\n  key <- name_backbone(name = species_name)$speciesKey\n\n  occ_data_rhinhipp <- occ_search(\n    taxonKey = key,\n    country = \"GB\",\n    hasCoordinate = TRUE,\n    limit = 2000\n  )\n\n  occ_df_rhinhipp <- occ_data_rhinhipp$data\n\n  # Note the date when GBIF data were downloaded\n  attr(occ_df_rhinhipp, \"gbif_download_date\") <- Sys.Date()\n\n  ####\n  #  Target group species for species background data\n  # Define target group (Chiroptera = bats)\n  bat_taxon_key <- name_backbone(name = \"Chiroptera\")$usageKey\n  \n  # Download bat occurrence records from GBIF\n  bat_occ <- rgbif::occ_search(\n    taxonKey = bat_taxon_key,\n    country = \"GB\",\n    hasCoordinate = TRUE,\n    limit = 10000  # increase if needed, but beware GBIF limits\n  )\n\n  # Extract data\n  bat_df <- bat_occ$data\n\n  # Remove records for the focal species (Rhinolophus hipposideros)\n  target_group_df <- bat_df %>%\n    # Select only the columns key, decimalLatitude, decimalLongitude\n    dplyr::select(species, key, decimalLatitude, decimalLongitude) %>%\n    # Remove records with missing coordinates\n    filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%\n    filter(!species %in% \"Rhinolophus hipposideros\") %>%\n    dplyr::select(species, decimalLatitude, decimalLongitude)\n  \n  # Note the date when GBIF data were downloaded\n  attr(target_group_df, \"gbif_download_date\") <- Sys.Date()\n  \n  # Convert to sf object\n  target_group_sf <- st_as_sf(\n    target_group_df,\n    coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n    crs = 4326\n  )\n}  \n```\n\n```{r}\n#| label: demo-gbif\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n####\n# Focal species for the SDM workshop\nspecies_name <- \"Rhinolophus hipposideros\"\nkey <- name_backbone(name = species_name)$speciesKey\n\nocc_data_rhinhipp <- occ_search(\n  taxonKey = key,\n  country = \"GB\",\n  hasCoordinate = TRUE,\n  limit = 2000\n)\n\nocc_df_rhinhipp <- occ_data_rhinhipp$data\n\n# Note the date when GBIF data were downloaded\nattr(occ_df_rhinhipp, \"gbif_download_date\") <- Sys.Date()\n\n\n####\n#  Target group species for species background data\n# Define target group (Chiroptera = bats)\nbat_taxon_key <- name_backbone(name = \"Chiroptera\")$usageKey\n\n# Download bat occurrence records from GBIF\nbat_occ <- rgbif::occ_search(\n  taxonKey = bat_taxon_key,\n  country = \"GB\",\n  hasCoordinate = TRUE,\n  limit = 10000  # increase if needed, but beware GBIF limits\n)\n\n# Extract data\nbat_df <- bat_occ$data\n\n# Remove records for the focal species (Rhinolophus hipposideros)\ntarget_group_df <- bat_df %>%\n    # Select only the columns key, decimalLatitude, decimalLongitude\n  dplyr::select(species, key, decimalLatitude, decimalLongitude) %>%\n  # Remove records with missing coordinates\n  filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%\n  filter(!species %in% \"Rhinolophus hipposideros\") %>%\n  dplyr::select(species, decimalLatitude, decimalLongitude)\n\n# Note the date when GBIF data were downloaded\nattr(target_group_df, \"gbif_download_date\") <- Sys.Date()\n\n# Convert to sf object\ntarget_group_sf <- st_as_sf(\n  target_group_df,\n  coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n  crs = 4326\n)\n```\n\n## 4. Save datasets for reuse\n\n```{r}\n#| label: hide-savedata\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\nif (!file.exists(\"data/workshop_data.RData\")) {\n  # Save vector and tabular data only\n  save(\n    World_sf, UK_sf, UK_admin_sf, WalesEast_admin_sf,\n    species_name, occ_df_rhinhipp, target_group_sf, \n    file = \"data/workshop_data.RData\"\n  )\n}  \n```\n\n```{r}\n#| label: demo-savedata\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n# Save vector and tabular data only\nsave(\n  World_sf, UK_sf, UK_admin_sf, WalesEast_admin_sf,\n  species_name, occ_df_rhinhipp, target_group_sf, \n  file = \"data/workshop_data.RData\"\n)\n\n# Save raster data separately as GeoTIFFs\nterra::writeRaster(Clim_UK, \"data/Clim_UK.tif\", overwrite = TRUE)\nterra::writeRaster(Elev_UK, \"data/Elev_UK.tif\", overwrite = TRUE)\nterra::writeRaster(Clim_cmip6_2041_2060_UK, \"data/Clim_cmip6_2041_2060_UK.tif\", overwrite = TRUE)\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n# Data preparation for the SDM workshop\n\nThis page documents the steps used to **download and save** the datasets used throughout the workshop.\\\nAll workshop pages will simply reload the saved `.RData` file to ensure reproducibility and avoid repeatedly downloading data from online sources (this helps with speed and reduces server load when 30+ students are running the same code *but* for actual research, always use the most up-to-date data!)).\n\n::: {.callout-note collapse=\"true\" icon=\"package\"}\n### Pre-saved data\n\nFor teaching efficiency, the workshop pages use **pre-saved datasets** stored in `/data/`.  \nThis ensures exercises run quickly and consistently without repeatedly downloading large files.\n\nIf you want to reproduce the full workflow, you can re-run the download and cropping steps.  \nBe aware that downloading global rasters and GBIF data may take several minutes.  \n\nFor full reproducibility, the data downloading steps are also documented below.\n\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"package\"}\n### Required R packages for the workshop\n\nMake sure the following packages are **installed and loaded** before proceeding. These will be used throughout the workshop:\n\n-   `terra` — for handling spatial raster and vector data\n-   `geodata` — provides easy access to global climate, topography, land cover and other raster datasets\n-   `sf` — for vector data in simple features format\n-   `rnaturalearth` — for country and world maps\n-   `rnaturalearthdata` — provides Natural Earth vector data (used with `rnaturalearth`)\n-   `spocc` — for accessing species occurrence data from multiple databases\n-   `rgbif` — for GBIF data queries\n-   `ggplot2` — for custom plotting\n-   `viridis` — for color palettes\n-   `tidyverse` — for data manipulation/formatting\n-   `leaflet` — for plotting interactive maps\n-   `CoordinateCleaner` — for cleaning species data\n-   `effects` — visualising model effects\n-   `ggcorrplot` — visualising correlation matrices\n-   `pROC` — analysing and visualising ROC curves\n-   `PresenceAbsence` — evaluating presence-absence model performance\n-   `ecospat` — spatial ecology and species distribution modeling tools\n\nYou can install any missing packages by running:\n\n```{r}\n#| label: packages-install\n#| echo: true\n#| message: false\n#| warning: false\n\n# Set CRAN mirror for non-interactive install\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\n# List of required packages\nrequired_packages <- c(\n  \"terra\", \"geodata\", \"sf\", \"raster\",\n  \"rnaturalearth\", \"rnaturalearthdata\",\n  \"spocc\", \"rgbif\", \"ggplot2\", \"viridis\", \"tidyverse\", \"dplyr\",\n  \"leaflet\", \"CoordinateCleaner\", \"effects\",\n  \"ggcorrplot\", \"caret\", \"pROC\", \"PresenceAbsence\", \"ecospat\",\n  \"mgcv\", \"dismo\", \"gbm\", \"randomForest\", \"maxnet\",\n  \"biomod2\", \"sdm\", \"ENMeval\"\n)\n\n# Identify missing packages\nmissing_packages <- required_packages[!(required_packages %in% rownames(installed.packages()))]\n\n# Install missing packages with dependencies\nif (length(missing_packages) > 0) {\n  suppressWarnings(suppressMessages(\n    install.packages(missing_packages, dependencies = TRUE, quiet = TRUE)\n  ))\n}\n\n# Load all required packages\ninvisible(lapply(required_packages, function(pkg) {\n  suppressWarnings(suppressMessages(\n    library(pkg, character.only = TRUE)\n  ))\n}))\n```\n:::\n\n<br>\n\n### 1. Basemaps\n\n```{r}\n#| label: download-maps\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\n\nif (!file.exists(\"data/workshop_data.RData\")) {\n  # Load country boundaries for the entire world as an sf object\n  World_sf <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n  # Load the United Kingdom boundary as an sf object\n  UK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n  # Load UK administrative regions (states/regions) as an sf object\n  UK_admin_sf <- ne_states(country = \"United Kingdom\", returnclass = \"sf\")\n\n  # Subset the UK administrative regions to only East Wales\n  WalesEast_admin_sf <- UK_admin_sf[UK_admin_sf$region == \"East Wales\", ]\n}\n```\n\n```{r}\n#| label: demo-maps\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n# Load country boundaries for the entire world as an sf object\nWorld_sf <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Load the United Kingdom boundary as an sf object\nUK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n# Load UK administrative regions (states/regions) as an sf object\nUK_admin_sf <- ne_states(country = \"United Kingdom\", returnclass = \"sf\")\n\n# Subset the UK administrative regions to only East Wales\nWalesEast_admin_sf <- UK_admin_sf[UK_admin_sf$region == \"East Wales\", ]\n```\n\n<br>\n\n### 2. Environmental data\n\n```{r}\n#| label: hide-download-envdata\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\nif (!file.exists(\"data/Clim_UK.tif\")) {\n  Clim_extant <- geodata::worldclim_global(var = \"bio\", res = 5, path = \"data/\")\n  Clim_UK <- terra::crop(Clim_extant, UK_sf)\n  terra::writeRaster(Clim_UK, \"data/Clim_UK.tif\", overwrite = TRUE)\n}\n\nif (!file.exists(\"data/Elev_UK.tif\")) {\n  Elev_UK <- geodata::elevation_30s(country = \"GB\", path = \"data/\")\n  terra::writeRaster(Elev_UK, \"data/Elev_UK.tif\", overwrite = TRUE)\n}\n\n\nif (!file.exists(\"data/Clim_cmip6_2041_2060_UK.tif\")) {\n  Clim_cmip6_2041_2060 <- geodata::cmip6_world(var = \"bioc\", ssp = \"126\", model = \"BCC-CSM2-MR\", time = \"2041-2060\", \n                                             res = 5, path = \"data/\")\n  terra::writeRaster(Clim_cmip6_2041_2060_UK, \"data/Clim_cmip6_2041_2060_UK.tif\", overwrite = TRUE)\n}\n```\n\n```{r}\n#| label: demo-envdata\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n# Download WorldClim data\nClim_extant <- geodata::worldclim_global(var = \"bio\", \n                                         res = 5, path = \"data/\")\n\nnames(Clim_extant) <- sub(\"^wc2.1_5m_\", \"\", names(Clim_extant))\n\n# Download elevation data\nElev_UK <- geodata::elevation_30s(country = \"GB\", path = \"data/\")\n\n# Crop climate to UK\nClim_UK <- terra::crop(Clim_extant, UK_sf)\n\n# Crop elevation to UK\nElev_UK <- terra::crop(Elev_UK, UK_sf)\n\n# Download bioclimatic variables for a future scenario\n# Example: CMIP6 data for SSP5-8.5, year 2060, GCM = BCC-CSM2-MR, resolution = 5 arc-min\n# Shared Socioeconomic Pathways (SSPs) code 126: refers to the \"Paris Agreement compatible\" pathway with:\n# SSP1: Sustainability (world shifts toward green growth, equity, and environmental awareness)\n# Radiative forcing stabilizes at 2.6 W/m² by 2100\nClim_cmip6_2041_2060 <- geodata::cmip6_world(var = \"bioc\", ssp = \"126\", model = \"BCC-CSM2-MR\", time = \"2041-2060\", \n                                             res = 5, path = \"data/\")\n\nnames(Clim_cmip6_2041_2060) <- gsub(\"^bio\", \"bio_\", names(Clim_cmip6_2041_2060))\n\n# Crop future climate to UK\nClim_cmip6_2041_2060_UK  <- terra::crop(Clim_extant, UK_sf)\n```\n\n<br>\n\n### 3. Species occurrence data from GBIF\n\n```{r}\n#| label: hide-download-gbif\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\nif (!file.exists(\"data/workshop_data.RData\")) {\n  ####\n  # Focal species for the SDM workshop\n  species_name <- \"Rhinolophus hipposideros\"\n  key <- name_backbone(name = species_name)$speciesKey\n\n  occ_data_rhinhipp <- occ_search(\n    taxonKey = key,\n    country = \"GB\",\n    hasCoordinate = TRUE,\n    limit = 2000\n  )\n\n  occ_df_rhinhipp <- occ_data_rhinhipp$data\n\n  # Note the date when GBIF data were downloaded\n  attr(occ_df_rhinhipp, \"gbif_download_date\") <- Sys.Date()\n\n  ####\n  #  Target group species for species background data\n  # Define target group (Chiroptera = bats)\n  bat_taxon_key <- name_backbone(name = \"Chiroptera\")$usageKey\n  \n  # Download bat occurrence records from GBIF\n  bat_occ <- rgbif::occ_search(\n    taxonKey = bat_taxon_key,\n    country = \"GB\",\n    hasCoordinate = TRUE,\n    limit = 10000  # increase if needed, but beware GBIF limits\n  )\n\n  # Extract data\n  bat_df <- bat_occ$data\n\n  # Remove records for the focal species (Rhinolophus hipposideros)\n  target_group_df <- bat_df %>%\n    # Select only the columns key, decimalLatitude, decimalLongitude\n    dplyr::select(species, key, decimalLatitude, decimalLongitude) %>%\n    # Remove records with missing coordinates\n    filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%\n    filter(!species %in% \"Rhinolophus hipposideros\") %>%\n    dplyr::select(species, decimalLatitude, decimalLongitude)\n  \n  # Note the date when GBIF data were downloaded\n  attr(target_group_df, \"gbif_download_date\") <- Sys.Date()\n  \n  # Convert to sf object\n  target_group_sf <- st_as_sf(\n    target_group_df,\n    coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n    crs = 4326\n  )\n}  \n```\n\n```{r}\n#| label: demo-gbif\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n####\n# Focal species for the SDM workshop\nspecies_name <- \"Rhinolophus hipposideros\"\nkey <- name_backbone(name = species_name)$speciesKey\n\nocc_data_rhinhipp <- occ_search(\n  taxonKey = key,\n  country = \"GB\",\n  hasCoordinate = TRUE,\n  limit = 2000\n)\n\nocc_df_rhinhipp <- occ_data_rhinhipp$data\n\n# Note the date when GBIF data were downloaded\nattr(occ_df_rhinhipp, \"gbif_download_date\") <- Sys.Date()\n\n\n####\n#  Target group species for species background data\n# Define target group (Chiroptera = bats)\nbat_taxon_key <- name_backbone(name = \"Chiroptera\")$usageKey\n\n# Download bat occurrence records from GBIF\nbat_occ <- rgbif::occ_search(\n  taxonKey = bat_taxon_key,\n  country = \"GB\",\n  hasCoordinate = TRUE,\n  limit = 10000  # increase if needed, but beware GBIF limits\n)\n\n# Extract data\nbat_df <- bat_occ$data\n\n# Remove records for the focal species (Rhinolophus hipposideros)\ntarget_group_df <- bat_df %>%\n    # Select only the columns key, decimalLatitude, decimalLongitude\n  dplyr::select(species, key, decimalLatitude, decimalLongitude) %>%\n  # Remove records with missing coordinates\n  filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%\n  filter(!species %in% \"Rhinolophus hipposideros\") %>%\n  dplyr::select(species, decimalLatitude, decimalLongitude)\n\n# Note the date when GBIF data were downloaded\nattr(target_group_df, \"gbif_download_date\") <- Sys.Date()\n\n# Convert to sf object\ntarget_group_sf <- st_as_sf(\n  target_group_df,\n  coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n  crs = 4326\n)\n```\n\n## 4. Save datasets for reuse\n\n```{r}\n#| label: hide-savedata\n#| echo: false\n#| include: false\n#| message: false\n#| warning: false\n\nif (!file.exists(\"data/workshop_data.RData\")) {\n  # Save vector and tabular data only\n  save(\n    World_sf, UK_sf, UK_admin_sf, WalesEast_admin_sf,\n    species_name, occ_df_rhinhipp, target_group_sf, \n    file = \"data/workshop_data.RData\"\n  )\n}  \n```\n\n```{r}\n#| label: demo-savedata\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n\n# Save vector and tabular data only\nsave(\n  World_sf, UK_sf, UK_admin_sf, WalesEast_admin_sf,\n  species_name, occ_df_rhinhipp, target_group_sf, \n  file = \"data/workshop_data.RData\"\n)\n\n# Save raster data separately as GeoTIFFs\nterra::writeRaster(Clim_UK, \"data/Clim_UK.tif\", overwrite = TRUE)\nterra::writeRaster(Elev_UK, \"data/Elev_UK.tif\", overwrite = TRUE)\nterra::writeRaster(Clim_cmip6_2041_2060_UK, \"data/Clim_cmip6_2041_2060_UK.tif\", overwrite = TRUE)\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"setup":"scripts/load_packages.R","message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"css":["styles.css"],"output-file":"page_SDM.1_DataPreparation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","pages":["index.qmd","page_SDM.1_DataPreparation.qmd"],"theme":"cosmo","toc-location":"left","page-layout":"full","code-copy":true,"title":"Data Preparation"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","pdf"]}