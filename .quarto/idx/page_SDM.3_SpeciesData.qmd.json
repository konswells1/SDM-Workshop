{"title":"Species Data","markdown":{"yaml":{"title":"Species Data","format":"html","editor":"visual"},"headingText":"Load pre-saved spatial and occurrence data","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup-load-data\n#| echo: false\n#| warning: false\n#| message: false\n\nlibrary(terra)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nload(\"data/workshop_data.RData\")\n```\n\nSpecies data form the foundation of ecological and biodiversity analyses. These data often include species **occurrence records**, abundance counts, and trait information, collected across both space and time.\n\nOne common type of species data is occurrence records — point data indicating where a species has been observed. In some cases, you may have a file containing presence-only records (locations where a species was detected). In other cases, you may work with presence-absence data, where each location is marked with whether the species was observed (present) or not (absent). These data can also apply to related domains, such as disease incidence records.\n\nIn the era of big data, many occurrence datasets are readily available through online biodiversity databases, often as georeferenced records.\n\nRegardless of the data source, the goal is to map the occurrence points and link them to relevant environmental conditions at each location. To do this, your dataset must include at least two columns with latitude and longitude coordinates indicating where each species record was collected or assumed absent.\n\n## 1. Species occurrence data: concepts and formats\n\nSpecies occurrence data typically include: - Presence-only records: Locations where a species has been observed - Presence-absence data: Locations where presence or absence was recorded - Abundance data: Counts or estimates of individuals observed\n\nCommon data fields include: - Species scientific name (species) - Geographic coordinates (longitude, latitude) - Observation date (date) - Observer or data source - Environmental metadata (optional)\n\nOccurrence data are accessible from a growing number of online databases. Notable examples of interest - [**GBIF (Global Biodiversity Information Facility)**](https://www.gbif.org/): the largest open-access biodiversity database, aggregating millions of occurrence records from museums, citizen science, and research projects worldwide. - [**iNaturalist**](https://www.inaturalist.org/): a citizen science platform where users submit geo-tagged observations of plants, animals, and fungi, often with photos verified by a community of experts. - [**eBird**](https://ebird.org/): a global bird observation database maintained by the Cornell Lab of Ornithology, containing millions of bird sightings submitted by birdwatchers. - [**OBIS (Ocean Biogeographic Information System)**](https://obis.org/): a specialized database focusing on marine species distribution data from research cruises, museums, and observation networks. - [Movebank](https://www.movebank.org/cms/movebank-main): detailed location data of animal movement sequences (mostly from tagging data that recorded movement paths)\n\n<br>\n\n### 1.1 Downloading species occurrence data from GBIF\n\n**The Global Biodiversity Information Facility (GBIF)** is a key open-access resource for species occurrence data. Using the `rgbif` package, we can query GBIF and download occurrence records for a species of interest. Below is an example workflow to download occurrence records for *Rhinolophus hipposideros* (the lesser horseshoe bat), restricted to records from the United Kingdom:\n\n```{r}\n#| label: rgbif-download\n#| eval: false\n#| echo: true\n#| message: false\n#| warning: false\n\nlibrary(rgbif)\n\n# Define species name\nspecies_name <- \"Rhinolophus hipposideros\"\n\n# Check whether synonyms are recorded in GBIF\nname_suggest(q=species_name, rank='species')\n\n# Check number of records with coordinate information\nocc_search(scientificName = species_name , hasCoordinate=T, limit = 10)$meta$count\n\n# Get GBIF taxon key for the species\nkey <- name_backbone(name = species_name)$speciesKey\n\n# Download occurrence data from the UK only (limited to 1000 records)\nocc_data_rhinhipp <- occ_search(\n  taxonKey = key,\n  country = \"GB\",          # Filter to UK only\n  hasCoordinate = TRUE,\n  limit = 1000\n)\n\n# Extract the data frame\nocc_df_rhinhipp <- occ_data_rhinhipp$data\n```\n\n::: {.callout-note collapse=\"true\" icon=\"lightbulb\"}\n### Our focal species of the day!\n\nIn this tutorial, we use occurrence data of the [Lesser Horseshoe Bat (Rhinolophus hipposideros)](https://animaldiversity.org/accounts/Rhinolophus_hipposideros/). Distributed across most of Europe, it can be found in warmer regions with woodlands, riparian forests and pastures. Lesser Horseshoe Bats forage for arthropods, often flying not more than a few meters above the ground. They may take large prey back to a roost or perch. From May, mixed-sex maternity colonies are formed in maternity roosting sites, and the females have a single pup. Lesser Horseshoe Bats hibernate over the winter in caves, disused mines, tunnels and cellars. They tend to roost in old houses, churches, stables and barns. According to the [IUCN Red List](https://www.iucnredlist.org/species/19518/21972794), their population is decreasing.\n\n![*Rhinolophus hipposideros* (source: faluke, via iNaturalist, photo 102259155)](./images/rhinolophus_bat.png){height=\"300px\"}\n\nIt’s worth browsing literature databases using search strings like \"*species distribution model*\" AND \"*Rhinolophus hipposideros*\". Reviewing recent titles and abstracts (from the past 5 to 10 years) can clarify how SDMs are applied to this species in both theoretical and applied contexts. At the same time, explore studies on the species' life history, including diet, habitat use, climate sensitivity, and roosting behavior. A strong biological foundation is essential for creating models that reflect real-world ecology and produce meaningful results.\n:::\n\n#### Plotting the occurrence records\n\nWe can now plot the downloaded occurrence records on a map to explore their spatial distribution within the UK. Mapping the raw occurrence data is important step in exploring your dataset, helping you verify that points fall roughly where expected. At this stage however, the data are likely uncleaned, so avoid drawing strong conclusions until further validation and cleaning have been performed.\n\n```{r}\n#| label: plot-occrec\n#| echo: true\n#| message: false\n#| warning: false\n\nlibrary(rnaturalearth)\nlibrary(ggplot2)\n\n# UK map\nUK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n# Plot the occurrence records over a UK basemap\nggplot() +\n  geom_sf(data = UK_sf, fill = \"grey90\", color = \"black\") +\n  geom_point(\n    data = occ_df_rhinhipp,\n    aes(x = decimalLongitude, y = decimalLatitude),\n    size = 1,\n    shape = 23,\n    fill = \"#6a3d9a\"\n  ) +\n  labs(\n    title = \"Records of Rhin. hipposideros in the UK\"\n  ) +\n  theme_minimal()\n```\n\n### Interactive map of occurrence records\n\nTo further explore the spatial distribution of *Rhinolophus hipposideros* in the UK, we can use an interactive map. The map below is rendered using the `leaflet` package and allows zooming, panning, and clicking on individual points for more information.\n\n```{r}\n#| label: leaflet-occrec\n#| echo: false\n#| message: false\n#| warning: false\n#| fig-height: 6\n\nlibrary(leaflet)\n\nleaflet(data = occ_df_rhinhipp) %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n  addCircleMarkers(\n    lng = ~decimalLongitude,\n    lat = ~decimalLatitude,\n    radius = 4,\n    fillColor = \"#6a3d9a\",   # Purple (accessible and visually appealing)\n    color = \"white\",\n    weight = 1,\n    fillOpacity = 0.8,\n    popup = ~paste0(\n      \"<strong>Scientific Name:</strong> \", scientificName,\n      \"<br><strong>Date:</strong> \", eventDate\n    )\n  ) %>%\n  addLegend(\n    position = \"bottomright\",\n    colors = \"#6a3d9a\",\n    labels = \"*Rhinolophus hipposideros*\",\n    title = \"Species\"\n  )\n```\n\n<br>\n\n::: {.callout-tip collapse=\"true\" icon=\"lightbulb\"}\n### Tip: Using your own field data\n\nYou can easily import species occurrence data from your own field surveys using tools like the [`readxl`](https://CRAN.R-project.org/package=readxl) package (for Excel files) or `read.csv()` (for CSVs). Regardless of format, the key requirement is to prepare a data frame with at least **two columns for coordinates** — ideally **longitude** first and **latitude** second (think: X and Y axes).\n\nDifferent coordinate systems can be used, such as geographic coordinates (longitude/latitude) or projected systems like UTM (Easting/Northing). These can be converted between each other in R by specifying and transforming the coordinate reference system (**CRS**).\n\nAdditional useful columns may include: - A **species name** column (if working with multiple species) - A **presence/absence indicator** (`1` for presence, `0` for absence)\n\nOnce formatted, your own data can be processed and analyzed in exactly the same way as GBIF or other downloaded datasets.\n:::\n\n::: {.callout-tip collapse=\"true\" icon=\"lightbulb\"}\n### Use filters wisely...\n\nWhen downloading large datasets, apply filters such as date range, coordinate presence, or country to reduce size and improve relevance.\n:::\n\n<br><br>\n\n## 2 Data cleaning for species occurrence data\n\nAs with many data-intensive workflows, cleaning your occurrence data is a crucial early step. Public database like GBIF are rich sources, but weren’t originally designed specifically for species distribution modelling (SDM) or systematic analyses. That means you will often need to filter, correct and validate the data so that your subsequent models are meaningful, reproducible and robust. Below are common issues, rationale, and reproducible workflows using R.\n\n#### What to check & why\n\n-   **Duplicates**: Records with identical coordinates (and metadata) can artificially inflate data density.\\\n-   **Outliers**: Points way outside expected range (e.g., in the ocean for terrestrial species, or extreme lat/lon).\\\n-   **Coordinate validation**: Missing values, lat/long reversed, zero coordinates, or values outside valid ranges.\\\n-   **Country/administrative mismatches**: The “country” field may not match what the spatial location implies.\\\n-   **Ungeoreferenced localities**: Text descriptions without coordinates; some may be georeferenced later, others discarded.\\\n-   **Sampling bias**: Over‑sampling near roads, institutions; under‑sampling in remote areas.\n\n#### Sampling bias in species occurrence data\n\nWhen species occurrence records are collected opportunistically (e.g. near roads, cities, institutions, or along accessible routes), **sampling bias** often arises. Some areas end up heavily sampled, others under-sampled. If not addressed, this bias can distort species distribution models in that overrepresented zones may dominate the environmental signal and lead to misleading predictions. On the other hand, high point density in some places *may* reflect genuine habitat suitability. Subsampling or thinning helps, but you must balance bias reduction against losing valid information.\n\nA related concept is **scale**: spatial grain (resolution) and extent affect what patterns you see. Organisms perceive environments differently at different scales — what seems clustered or patchy at one grain may be regular or homogeneous at another. So exploring how different grain sizes / sampling distances influence your data is useful.\n\n<br>\n\n::: {.callout-note collapse=\"true\" icon=\"lightbulb\"}\n### Exploring spatial resolution effects:\n\nHow does changing the spatial resolution (grain size) affect the number and distribution of retained species occurrences?\\\nWatch the animation below to see how coarser grids retain fewer points while finer grids retain more.\\\nThe raster grid is created with `terra::rast()` and its resolution adjusted using `res()`.\\\nPoints are subsampled using stratified random sampling with `terra::spatSample()`, selecting one point per grid cell.\n:::\n\n```{r}\n#| label: grid-resolution\n#| echo: false\n#| message: false\n#| warning: false\n#| results: 'hide'\n#| fig-height: 6\n\nlibrary(terra)\nlibrary(magick)\n\n# Create spatial points from species data (lat/lon in correct order)\nocc_points <- terra::vect(\n  as.matrix(occ_df_rhinhipp[, c(\"decimalLongitude\", \"decimalLatitude\")]),\n  type = \"points\",\n  crs = \"EPSG:4326\"\n)\n\n# Create base raster using extent of occurrence points\nbase_r <- terra::rast(occ_points)\n\n# Create folder to store frames\ndir.create(\"frames\", showWarnings = FALSE)\nn_iter <- 20\nframes <- list()\n\n# Iterate over different resolutions and sample points\nfor (i in 1:n_iter) {\n  res_samp <- sample(seq(0.1, 1.0, by = 0.1), 1)\n  r <- base_r\n  res(r) <- res_samp\n  r <- extend(r, ext(r) + 1)\n  \n  occ_points_samp <- terra::spatSample(occ_points, size = 1, method = \"random\", strata = r)\n  p <- as.polygons(r)\n  \n  png_filename <- sprintf(\"frames/frame_%02d.png\", i)\n  png(png_filename, width = 800, height = 600)\n  plot(p, border = 'gray', main = paste(\"Grid Resolution:\", res_samp, \"°\"))\n  points(occ_points, pch = 16, col = \"black\", cex = 0.7)\n  points(occ_points_samp, cex = 1.5, col = 'red', pch = 'x')\n  dev.off()\n  \n  frames[[i]] <- image_read(png_filename)\n}\n\n# Create GIF\ngif <- image_animate(image_join(frames), fps = 2)\nimage_write(gif, \"grid_sampling_animation.gif\")\n```\n\n```{r}\n#| echo: false\n#| results: 'asis'\n\n# Display the GIF in HTML\ncat('<img src=\"grid_sampling_animation.gif\" width=\"700\" style=\"display:block; margin:auto;\">')\n```\n\n#### Cleaning species data using **`CoordinateCleaner`**\n\nNot all coordinates in species occurrence data are correct or reliable. We need to cross-check these carefully to ensure robust modelling.\n\nAn overview of coordinate cleaning methods is provided by Robert Hijmans in tutorials from the **dismo** package. A more recent and powerful tool is the **CoordinateCleaner** package (Zizka et al., 2019), which efficiently cleans geographic coordinates using multiple automated tests.\n\nThe key cleaning steps we will apply here include: - Removing **duplicates** (exact same coordinates and metadata). - Checking if coordinates match the reported **country codes** (test centroids). - Detecting spatial **outliers** far from expected ranges. - Testing proximity to known biodiversity institutions (e.g., botanical gardens) that may bias records. - Additional cleaning steps are available; rigorous exploration and testing are crucial for professional data cleaning.\n\n<BR>\n\n```{r}\n#| label: clean-coordinates\n#| message: false\n#| warning: false\n#| echo: true\n\n# Load libraries\nlibrary(CoordinateCleaner)\nlibrary(terra)\nlibrary(sf)\nlibrary(dplyr)\n\n# Convert to sf object for spatial operations\nocc_sf_rhinhipp <- st_as_sf(occ_df_rhinhipp, coords = c(\"decimalLongitude\", \"decimalLatitude\"), crs = 4326)\n\n# Step 1: Remove exact duplicates (including metadata if needed)\nocc_unique_rhinhipp <- occ_df_rhinhipp %>% distinct()\n\n# Flag records with potentially problematic coordinates using various tests:\n# - 'centroids': points near country or province centroids (likely errors)\n# - 'duplicates': exact duplicate records\n# - 'equal': points with identical latitude and longitude values\n# - 'gbif': records flagged by GBIF as problematic\n# - 'institutions': points near biodiversity institutions (e.g., museums, botanical gardens)\n# - 'seas': points falling in the sea for terrestrial species\n# - 'zeros': points with zero coordinates (0,0)\n# The parameter inst_rad = 10000 sets the radius (in meters) around institutions to flag points\nocc_rhinhipp_flags <- clean_coordinates(occ_unique_rhinhipp, lon=\"decimalLongitude\", lat=\"decimalLatitude\", countries=\"countryCode\", \n\t\t\ttests=c(\"centroids\", \"duplicates\", \"equal\", \"gbif\", \"institutions\", \"zeros\"), inst_rad = 10000)\n\n# Subset the original data to keep only the records that passed all cleaning tests\nocc_rhinhipp_cleaned <- occ_unique_rhinhipp[occ_rhinhipp_flags$.summary,]\n\n# Print number of records retained after cleaning\ncat(\"Number of records before cleaning:\", nrow(occ_unique_rhinhipp), \"\\n\")\ncat(\"Number of records retained after cleaning:\", nrow(occ_rhinhipp_cleaned), \"\\n\")\n\n```\n\n```{r}\n#| echo: false\n#| message: false\n#| warning: false\n#| fig-height: 6\n\n# Plot the raw versus cleaned records\nlibrary(leaflet)\n\nleaflet() %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n\n  # Add raw occurrence points (purple), hidden by default\n  addCircleMarkers(\n    data = occ_df_rhinhipp,\n    lng = ~decimalLongitude,\n    lat = ~decimalLatitude,\n    radius = 5,\n    color = \"#6a3d9a\",\n    fillColor = \"#6a3d9a\",\n    fillOpacity = 0.4,\n    stroke = FALSE,\n    group = \"Raw points\"\n  ) %>%\n\n  # Add cleaned points (red)\n  addCircleMarkers(\n    data = occ_rhinhipp_cleaned,\n    lng = ~decimalLongitude,\n    lat = ~decimalLatitude,\n    radius = 5,\n    color = \"black\",\n    fillColor = \"#e31a1c\",\n    fillOpacity = 0.9,\n    weight = 1,\n    group = \"Cleaned points\"\n  ) %>%\n\n  # Add layer control to toggle point types\n  addLayersControl(\n    overlayGroups = c(\"Raw points\", \"Cleaned points\"),\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n\n  # Hide the raw points group by default\n  hideGroup(\"Raw points\") %>%\n\n  # Add a legend explaining point colors\n  addLegend(\n    position = \"bottomright\",\n    colors = c(\"#6a3d9a\", \"#e31a1c\"),\n    labels = c(\"Raw records\", \"Cleaned records\"),\n    title = \"Point Types\",\n    opacity = 0.9\n  )\n\n```\n\n::: {.callout-note collapse=\"true\" icon=\"download\"}\n### Accessing multiple occurrence databases with `spocc`\n\nThe [`spocc`](https://docs.ropensci.org/spocc/) package is a versatile R tool that lets you query **multiple biodiversity databases** in a single workflow — including **GBIF**, **eBird**, **iNaturalist**, and **OBIS**.\n\nThis is especially helpful when working with **taxa not well covered** in a single database, or when aiming to **compare sources**.\n\nBelow is a simple example querying **iNaturalist** for the species *Zosterops emiliae* (Mountain Black-eye, a species endemic to Borneo).\n\n<iframe src=\"https://macaulaylibrary.org/asset/109035701/embed\" height=\"370\" width=\"320\" frameborder=\"0\" allowfullscreen>\n\n</iframe>\n\n```{r}\n#| echo: false\n#| message: false\n#| warning: false\n\nlibrary(spocc)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# Search for records from iNaturalist\nres <- occ(query = \"Zosterops emiliae\", from = \"inat\", limit = 100)\n\n# Convert to data frame\ndf <- occ2df(res)\n\n# Filter iNaturalist results (redundant here, but useful if multiple sources are queried)\ninat_df <- df %>% filter(prov == \"inat\")\n\n# Remove missing coordinates\ninat_df <- inat_df %>% filter(!is.na(latitude) & !is.na(longitude))\n```\n\n```{r}\n#| echo: false\n\ninat_df$longitude <- as.numeric(inat_df$longitude)\ninat_df$latitude <- as.numeric(inat_df$latitude)\n\n# Create leaflet map\nleaflet(data = inat_df) %>%\n  addProviderTiles(providers$OpenTopoMap) %>%\n  addCircleMarkers(\n    ~longitude, ~latitude,\n    radius = 5,\n    color = \"darkgreen\",\n    fillOpacity = 0.7,\n    popup = ~name\n  ) %>%\n  addScaleBar(position = \"bottomleft\")\n```\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"info\"}\n### Exercises: Examing different species data\n\n1.  **Download and map a different species:**\\\n    Choose a different species relevant to your region or interests and the use `occ_search()` to download up to 1000 records with coordinates, restricted to a country of your choice. Plot the occurrence points on a static map.\n\n2.  **Explore sampling bias and thinning:**\\\n    Create a `terra::rast()` object covering the extent of your species data. Use stratified sampling (`terra::spatSample()`) to thin the data across raster cells of varying resolutions (e.g., 0.1, 0.25, 0.5 degrees). Plot the full vs. thinned datasets over a base map to compare spatial density.\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"book\"}\n### Literature\n\nAiello-Lammens, M. E., Boria, R. A., Radosavljevic, A., Vilela, B., & Anderson, R. P. (2015). **spThin: an R package for spatial thinning of species occurrence records for use in ecological niche models.** *Ecography*, 38(5), 541–545. [doi:10.1111/ecog.01132](https://doi.org/10.1111/ecog.01132)\n\nBaker, D. J., Maclean, I. M. D., & Gaston, K. J. (2024). **Effective strategies for correcting spatial sampling bias in species distribution models without independent test data.** *Diversity and Distributions*, 30(3), e13802. [doi:10.1111/ddi.13802](https://doi.org/10.1111/ddi.13802)\n\nInman, R., Franklin, J., Esque, T., & Nussear, K. (2021). **Comparing sample bias correction methods for species distribution modeling using virtual species**. *Ecosphere*, 12(3), e03422. [doi:10.1002/ecs2.3422](https://doi.org/10.1002/ecs2.3422)\n\nSteen, V. A., Tingley, M. W., Paton, P. W. C., & Elphick, C. S. (2021). **Spatial thinning and class balancing: Key choices lead to variation in the performance of species distribution models with citizen science data**. *Methods in Ecology and Evolution*, 12(2), 216–226. [doi:10.1111/2041-210X.13525](https://doi.org/10.1111/2041-210X.13525)\n\nZizka, A., Silvestro, D., Andermann, T., Azevedo, J., Duarte Ritter, C., Edler, D., Farooq, H., Herdean, A., Ariza, M., Scharn, R., Svantesson, S., Wengström, N., Zizka, V. & Antonelli, A. (2019). **CoordinateCleaner: Standardized cleaning of occurrence records from biological collection databases**. *Methods in Ecology and Evolution*, 10(5), 744–751. [doi:10.1111/2041-210X.13152](https://doi.org/10.1111/2041-210X.13152)\n:::\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup-load-data\n#| echo: false\n#| warning: false\n#| message: false\n\nlibrary(terra)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Load pre-saved spatial and occurrence data\nload(\"data/workshop_data.RData\")\n```\n\nSpecies data form the foundation of ecological and biodiversity analyses. These data often include species **occurrence records**, abundance counts, and trait information, collected across both space and time.\n\nOne common type of species data is occurrence records — point data indicating where a species has been observed. In some cases, you may have a file containing presence-only records (locations where a species was detected). In other cases, you may work with presence-absence data, where each location is marked with whether the species was observed (present) or not (absent). These data can also apply to related domains, such as disease incidence records.\n\nIn the era of big data, many occurrence datasets are readily available through online biodiversity databases, often as georeferenced records.\n\nRegardless of the data source, the goal is to map the occurrence points and link them to relevant environmental conditions at each location. To do this, your dataset must include at least two columns with latitude and longitude coordinates indicating where each species record was collected or assumed absent.\n\n## 1. Species occurrence data: concepts and formats\n\nSpecies occurrence data typically include: - Presence-only records: Locations where a species has been observed - Presence-absence data: Locations where presence or absence was recorded - Abundance data: Counts or estimates of individuals observed\n\nCommon data fields include: - Species scientific name (species) - Geographic coordinates (longitude, latitude) - Observation date (date) - Observer or data source - Environmental metadata (optional)\n\nOccurrence data are accessible from a growing number of online databases. Notable examples of interest - [**GBIF (Global Biodiversity Information Facility)**](https://www.gbif.org/): the largest open-access biodiversity database, aggregating millions of occurrence records from museums, citizen science, and research projects worldwide. - [**iNaturalist**](https://www.inaturalist.org/): a citizen science platform where users submit geo-tagged observations of plants, animals, and fungi, often with photos verified by a community of experts. - [**eBird**](https://ebird.org/): a global bird observation database maintained by the Cornell Lab of Ornithology, containing millions of bird sightings submitted by birdwatchers. - [**OBIS (Ocean Biogeographic Information System)**](https://obis.org/): a specialized database focusing on marine species distribution data from research cruises, museums, and observation networks. - [Movebank](https://www.movebank.org/cms/movebank-main): detailed location data of animal movement sequences (mostly from tagging data that recorded movement paths)\n\n<br>\n\n### 1.1 Downloading species occurrence data from GBIF\n\n**The Global Biodiversity Information Facility (GBIF)** is a key open-access resource for species occurrence data. Using the `rgbif` package, we can query GBIF and download occurrence records for a species of interest. Below is an example workflow to download occurrence records for *Rhinolophus hipposideros* (the lesser horseshoe bat), restricted to records from the United Kingdom:\n\n```{r}\n#| label: rgbif-download\n#| eval: false\n#| echo: true\n#| message: false\n#| warning: false\n\nlibrary(rgbif)\n\n# Define species name\nspecies_name <- \"Rhinolophus hipposideros\"\n\n# Check whether synonyms are recorded in GBIF\nname_suggest(q=species_name, rank='species')\n\n# Check number of records with coordinate information\nocc_search(scientificName = species_name , hasCoordinate=T, limit = 10)$meta$count\n\n# Get GBIF taxon key for the species\nkey <- name_backbone(name = species_name)$speciesKey\n\n# Download occurrence data from the UK only (limited to 1000 records)\nocc_data_rhinhipp <- occ_search(\n  taxonKey = key,\n  country = \"GB\",          # Filter to UK only\n  hasCoordinate = TRUE,\n  limit = 1000\n)\n\n# Extract the data frame\nocc_df_rhinhipp <- occ_data_rhinhipp$data\n```\n\n::: {.callout-note collapse=\"true\" icon=\"lightbulb\"}\n### Our focal species of the day!\n\nIn this tutorial, we use occurrence data of the [Lesser Horseshoe Bat (Rhinolophus hipposideros)](https://animaldiversity.org/accounts/Rhinolophus_hipposideros/). Distributed across most of Europe, it can be found in warmer regions with woodlands, riparian forests and pastures. Lesser Horseshoe Bats forage for arthropods, often flying not more than a few meters above the ground. They may take large prey back to a roost or perch. From May, mixed-sex maternity colonies are formed in maternity roosting sites, and the females have a single pup. Lesser Horseshoe Bats hibernate over the winter in caves, disused mines, tunnels and cellars. They tend to roost in old houses, churches, stables and barns. According to the [IUCN Red List](https://www.iucnredlist.org/species/19518/21972794), their population is decreasing.\n\n![*Rhinolophus hipposideros* (source: faluke, via iNaturalist, photo 102259155)](./images/rhinolophus_bat.png){height=\"300px\"}\n\nIt’s worth browsing literature databases using search strings like \"*species distribution model*\" AND \"*Rhinolophus hipposideros*\". Reviewing recent titles and abstracts (from the past 5 to 10 years) can clarify how SDMs are applied to this species in both theoretical and applied contexts. At the same time, explore studies on the species' life history, including diet, habitat use, climate sensitivity, and roosting behavior. A strong biological foundation is essential for creating models that reflect real-world ecology and produce meaningful results.\n:::\n\n#### Plotting the occurrence records\n\nWe can now plot the downloaded occurrence records on a map to explore their spatial distribution within the UK. Mapping the raw occurrence data is important step in exploring your dataset, helping you verify that points fall roughly where expected. At this stage however, the data are likely uncleaned, so avoid drawing strong conclusions until further validation and cleaning have been performed.\n\n```{r}\n#| label: plot-occrec\n#| echo: true\n#| message: false\n#| warning: false\n\nlibrary(rnaturalearth)\nlibrary(ggplot2)\n\n# UK map\nUK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n# Plot the occurrence records over a UK basemap\nggplot() +\n  geom_sf(data = UK_sf, fill = \"grey90\", color = \"black\") +\n  geom_point(\n    data = occ_df_rhinhipp,\n    aes(x = decimalLongitude, y = decimalLatitude),\n    size = 1,\n    shape = 23,\n    fill = \"#6a3d9a\"\n  ) +\n  labs(\n    title = \"Records of Rhin. hipposideros in the UK\"\n  ) +\n  theme_minimal()\n```\n\n### Interactive map of occurrence records\n\nTo further explore the spatial distribution of *Rhinolophus hipposideros* in the UK, we can use an interactive map. The map below is rendered using the `leaflet` package and allows zooming, panning, and clicking on individual points for more information.\n\n```{r}\n#| label: leaflet-occrec\n#| echo: false\n#| message: false\n#| warning: false\n#| fig-height: 6\n\nlibrary(leaflet)\n\nleaflet(data = occ_df_rhinhipp) %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n  addCircleMarkers(\n    lng = ~decimalLongitude,\n    lat = ~decimalLatitude,\n    radius = 4,\n    fillColor = \"#6a3d9a\",   # Purple (accessible and visually appealing)\n    color = \"white\",\n    weight = 1,\n    fillOpacity = 0.8,\n    popup = ~paste0(\n      \"<strong>Scientific Name:</strong> \", scientificName,\n      \"<br><strong>Date:</strong> \", eventDate\n    )\n  ) %>%\n  addLegend(\n    position = \"bottomright\",\n    colors = \"#6a3d9a\",\n    labels = \"*Rhinolophus hipposideros*\",\n    title = \"Species\"\n  )\n```\n\n<br>\n\n::: {.callout-tip collapse=\"true\" icon=\"lightbulb\"}\n### Tip: Using your own field data\n\nYou can easily import species occurrence data from your own field surveys using tools like the [`readxl`](https://CRAN.R-project.org/package=readxl) package (for Excel files) or `read.csv()` (for CSVs). Regardless of format, the key requirement is to prepare a data frame with at least **two columns for coordinates** — ideally **longitude** first and **latitude** second (think: X and Y axes).\n\nDifferent coordinate systems can be used, such as geographic coordinates (longitude/latitude) or projected systems like UTM (Easting/Northing). These can be converted between each other in R by specifying and transforming the coordinate reference system (**CRS**).\n\nAdditional useful columns may include: - A **species name** column (if working with multiple species) - A **presence/absence indicator** (`1` for presence, `0` for absence)\n\nOnce formatted, your own data can be processed and analyzed in exactly the same way as GBIF or other downloaded datasets.\n:::\n\n::: {.callout-tip collapse=\"true\" icon=\"lightbulb\"}\n### Use filters wisely...\n\nWhen downloading large datasets, apply filters such as date range, coordinate presence, or country to reduce size and improve relevance.\n:::\n\n<br><br>\n\n## 2 Data cleaning for species occurrence data\n\nAs with many data-intensive workflows, cleaning your occurrence data is a crucial early step. Public database like GBIF are rich sources, but weren’t originally designed specifically for species distribution modelling (SDM) or systematic analyses. That means you will often need to filter, correct and validate the data so that your subsequent models are meaningful, reproducible and robust. Below are common issues, rationale, and reproducible workflows using R.\n\n#### What to check & why\n\n-   **Duplicates**: Records with identical coordinates (and metadata) can artificially inflate data density.\\\n-   **Outliers**: Points way outside expected range (e.g., in the ocean for terrestrial species, or extreme lat/lon).\\\n-   **Coordinate validation**: Missing values, lat/long reversed, zero coordinates, or values outside valid ranges.\\\n-   **Country/administrative mismatches**: The “country” field may not match what the spatial location implies.\\\n-   **Ungeoreferenced localities**: Text descriptions without coordinates; some may be georeferenced later, others discarded.\\\n-   **Sampling bias**: Over‑sampling near roads, institutions; under‑sampling in remote areas.\n\n#### Sampling bias in species occurrence data\n\nWhen species occurrence records are collected opportunistically (e.g. near roads, cities, institutions, or along accessible routes), **sampling bias** often arises. Some areas end up heavily sampled, others under-sampled. If not addressed, this bias can distort species distribution models in that overrepresented zones may dominate the environmental signal and lead to misleading predictions. On the other hand, high point density in some places *may* reflect genuine habitat suitability. Subsampling or thinning helps, but you must balance bias reduction against losing valid information.\n\nA related concept is **scale**: spatial grain (resolution) and extent affect what patterns you see. Organisms perceive environments differently at different scales — what seems clustered or patchy at one grain may be regular or homogeneous at another. So exploring how different grain sizes / sampling distances influence your data is useful.\n\n<br>\n\n::: {.callout-note collapse=\"true\" icon=\"lightbulb\"}\n### Exploring spatial resolution effects:\n\nHow does changing the spatial resolution (grain size) affect the number and distribution of retained species occurrences?\\\nWatch the animation below to see how coarser grids retain fewer points while finer grids retain more.\\\nThe raster grid is created with `terra::rast()` and its resolution adjusted using `res()`.\\\nPoints are subsampled using stratified random sampling with `terra::spatSample()`, selecting one point per grid cell.\n:::\n\n```{r}\n#| label: grid-resolution\n#| echo: false\n#| message: false\n#| warning: false\n#| results: 'hide'\n#| fig-height: 6\n\nlibrary(terra)\nlibrary(magick)\n\n# Create spatial points from species data (lat/lon in correct order)\nocc_points <- terra::vect(\n  as.matrix(occ_df_rhinhipp[, c(\"decimalLongitude\", \"decimalLatitude\")]),\n  type = \"points\",\n  crs = \"EPSG:4326\"\n)\n\n# Create base raster using extent of occurrence points\nbase_r <- terra::rast(occ_points)\n\n# Create folder to store frames\ndir.create(\"frames\", showWarnings = FALSE)\nn_iter <- 20\nframes <- list()\n\n# Iterate over different resolutions and sample points\nfor (i in 1:n_iter) {\n  res_samp <- sample(seq(0.1, 1.0, by = 0.1), 1)\n  r <- base_r\n  res(r) <- res_samp\n  r <- extend(r, ext(r) + 1)\n  \n  occ_points_samp <- terra::spatSample(occ_points, size = 1, method = \"random\", strata = r)\n  p <- as.polygons(r)\n  \n  png_filename <- sprintf(\"frames/frame_%02d.png\", i)\n  png(png_filename, width = 800, height = 600)\n  plot(p, border = 'gray', main = paste(\"Grid Resolution:\", res_samp, \"°\"))\n  points(occ_points, pch = 16, col = \"black\", cex = 0.7)\n  points(occ_points_samp, cex = 1.5, col = 'red', pch = 'x')\n  dev.off()\n  \n  frames[[i]] <- image_read(png_filename)\n}\n\n# Create GIF\ngif <- image_animate(image_join(frames), fps = 2)\nimage_write(gif, \"grid_sampling_animation.gif\")\n```\n\n```{r}\n#| echo: false\n#| results: 'asis'\n\n# Display the GIF in HTML\ncat('<img src=\"grid_sampling_animation.gif\" width=\"700\" style=\"display:block; margin:auto;\">')\n```\n\n#### Cleaning species data using **`CoordinateCleaner`**\n\nNot all coordinates in species occurrence data are correct or reliable. We need to cross-check these carefully to ensure robust modelling.\n\nAn overview of coordinate cleaning methods is provided by Robert Hijmans in tutorials from the **dismo** package. A more recent and powerful tool is the **CoordinateCleaner** package (Zizka et al., 2019), which efficiently cleans geographic coordinates using multiple automated tests.\n\nThe key cleaning steps we will apply here include: - Removing **duplicates** (exact same coordinates and metadata). - Checking if coordinates match the reported **country codes** (test centroids). - Detecting spatial **outliers** far from expected ranges. - Testing proximity to known biodiversity institutions (e.g., botanical gardens) that may bias records. - Additional cleaning steps are available; rigorous exploration and testing are crucial for professional data cleaning.\n\n<BR>\n\n```{r}\n#| label: clean-coordinates\n#| message: false\n#| warning: false\n#| echo: true\n\n# Load libraries\nlibrary(CoordinateCleaner)\nlibrary(terra)\nlibrary(sf)\nlibrary(dplyr)\n\n# Convert to sf object for spatial operations\nocc_sf_rhinhipp <- st_as_sf(occ_df_rhinhipp, coords = c(\"decimalLongitude\", \"decimalLatitude\"), crs = 4326)\n\n# Step 1: Remove exact duplicates (including metadata if needed)\nocc_unique_rhinhipp <- occ_df_rhinhipp %>% distinct()\n\n# Flag records with potentially problematic coordinates using various tests:\n# - 'centroids': points near country or province centroids (likely errors)\n# - 'duplicates': exact duplicate records\n# - 'equal': points with identical latitude and longitude values\n# - 'gbif': records flagged by GBIF as problematic\n# - 'institutions': points near biodiversity institutions (e.g., museums, botanical gardens)\n# - 'seas': points falling in the sea for terrestrial species\n# - 'zeros': points with zero coordinates (0,0)\n# The parameter inst_rad = 10000 sets the radius (in meters) around institutions to flag points\nocc_rhinhipp_flags <- clean_coordinates(occ_unique_rhinhipp, lon=\"decimalLongitude\", lat=\"decimalLatitude\", countries=\"countryCode\", \n\t\t\ttests=c(\"centroids\", \"duplicates\", \"equal\", \"gbif\", \"institutions\", \"zeros\"), inst_rad = 10000)\n\n# Subset the original data to keep only the records that passed all cleaning tests\nocc_rhinhipp_cleaned <- occ_unique_rhinhipp[occ_rhinhipp_flags$.summary,]\n\n# Print number of records retained after cleaning\ncat(\"Number of records before cleaning:\", nrow(occ_unique_rhinhipp), \"\\n\")\ncat(\"Number of records retained after cleaning:\", nrow(occ_rhinhipp_cleaned), \"\\n\")\n\n```\n\n```{r}\n#| echo: false\n#| message: false\n#| warning: false\n#| fig-height: 6\n\n# Plot the raw versus cleaned records\nlibrary(leaflet)\n\nleaflet() %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n\n  # Add raw occurrence points (purple), hidden by default\n  addCircleMarkers(\n    data = occ_df_rhinhipp,\n    lng = ~decimalLongitude,\n    lat = ~decimalLatitude,\n    radius = 5,\n    color = \"#6a3d9a\",\n    fillColor = \"#6a3d9a\",\n    fillOpacity = 0.4,\n    stroke = FALSE,\n    group = \"Raw points\"\n  ) %>%\n\n  # Add cleaned points (red)\n  addCircleMarkers(\n    data = occ_rhinhipp_cleaned,\n    lng = ~decimalLongitude,\n    lat = ~decimalLatitude,\n    radius = 5,\n    color = \"black\",\n    fillColor = \"#e31a1c\",\n    fillOpacity = 0.9,\n    weight = 1,\n    group = \"Cleaned points\"\n  ) %>%\n\n  # Add layer control to toggle point types\n  addLayersControl(\n    overlayGroups = c(\"Raw points\", \"Cleaned points\"),\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n\n  # Hide the raw points group by default\n  hideGroup(\"Raw points\") %>%\n\n  # Add a legend explaining point colors\n  addLegend(\n    position = \"bottomright\",\n    colors = c(\"#6a3d9a\", \"#e31a1c\"),\n    labels = c(\"Raw records\", \"Cleaned records\"),\n    title = \"Point Types\",\n    opacity = 0.9\n  )\n\n```\n\n::: {.callout-note collapse=\"true\" icon=\"download\"}\n### Accessing multiple occurrence databases with `spocc`\n\nThe [`spocc`](https://docs.ropensci.org/spocc/) package is a versatile R tool that lets you query **multiple biodiversity databases** in a single workflow — including **GBIF**, **eBird**, **iNaturalist**, and **OBIS**.\n\nThis is especially helpful when working with **taxa not well covered** in a single database, or when aiming to **compare sources**.\n\nBelow is a simple example querying **iNaturalist** for the species *Zosterops emiliae* (Mountain Black-eye, a species endemic to Borneo).\n\n<iframe src=\"https://macaulaylibrary.org/asset/109035701/embed\" height=\"370\" width=\"320\" frameborder=\"0\" allowfullscreen>\n\n</iframe>\n\n```{r}\n#| echo: false\n#| message: false\n#| warning: false\n\nlibrary(spocc)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# Search for records from iNaturalist\nres <- occ(query = \"Zosterops emiliae\", from = \"inat\", limit = 100)\n\n# Convert to data frame\ndf <- occ2df(res)\n\n# Filter iNaturalist results (redundant here, but useful if multiple sources are queried)\ninat_df <- df %>% filter(prov == \"inat\")\n\n# Remove missing coordinates\ninat_df <- inat_df %>% filter(!is.na(latitude) & !is.na(longitude))\n```\n\n```{r}\n#| echo: false\n\ninat_df$longitude <- as.numeric(inat_df$longitude)\ninat_df$latitude <- as.numeric(inat_df$latitude)\n\n# Create leaflet map\nleaflet(data = inat_df) %>%\n  addProviderTiles(providers$OpenTopoMap) %>%\n  addCircleMarkers(\n    ~longitude, ~latitude,\n    radius = 5,\n    color = \"darkgreen\",\n    fillOpacity = 0.7,\n    popup = ~name\n  ) %>%\n  addScaleBar(position = \"bottomleft\")\n```\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"info\"}\n### Exercises: Examing different species data\n\n1.  **Download and map a different species:**\\\n    Choose a different species relevant to your region or interests and the use `occ_search()` to download up to 1000 records with coordinates, restricted to a country of your choice. Plot the occurrence points on a static map.\n\n2.  **Explore sampling bias and thinning:**\\\n    Create a `terra::rast()` object covering the extent of your species data. Use stratified sampling (`terra::spatSample()`) to thin the data across raster cells of varying resolutions (e.g., 0.1, 0.25, 0.5 degrees). Plot the full vs. thinned datasets over a base map to compare spatial density.\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"book\"}\n### Literature\n\nAiello-Lammens, M. E., Boria, R. A., Radosavljevic, A., Vilela, B., & Anderson, R. P. (2015). **spThin: an R package for spatial thinning of species occurrence records for use in ecological niche models.** *Ecography*, 38(5), 541–545. [doi:10.1111/ecog.01132](https://doi.org/10.1111/ecog.01132)\n\nBaker, D. J., Maclean, I. M. D., & Gaston, K. J. (2024). **Effective strategies for correcting spatial sampling bias in species distribution models without independent test data.** *Diversity and Distributions*, 30(3), e13802. [doi:10.1111/ddi.13802](https://doi.org/10.1111/ddi.13802)\n\nInman, R., Franklin, J., Esque, T., & Nussear, K. (2021). **Comparing sample bias correction methods for species distribution modeling using virtual species**. *Ecosphere*, 12(3), e03422. [doi:10.1002/ecs2.3422](https://doi.org/10.1002/ecs2.3422)\n\nSteen, V. A., Tingley, M. W., Paton, P. W. C., & Elphick, C. S. (2021). **Spatial thinning and class balancing: Key choices lead to variation in the performance of species distribution models with citizen science data**. *Methods in Ecology and Evolution*, 12(2), 216–226. [doi:10.1111/2041-210X.13525](https://doi.org/10.1111/2041-210X.13525)\n\nZizka, A., Silvestro, D., Andermann, T., Azevedo, J., Duarte Ritter, C., Edler, D., Farooq, H., Herdean, A., Ariza, M., Scharn, R., Svantesson, S., Wengström, N., Zizka, V. & Antonelli, A. (2019). **CoordinateCleaner: Standardized cleaning of occurrence records from biological collection databases**. *Methods in Ecology and Evolution*, 10(5), 744–751. [doi:10.1111/2041-210X.13152](https://doi.org/10.1111/2041-210X.13152)\n:::\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"setup":"scripts/load_packages.R","message":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"css":["styles.css"],"output-file":"page_SDM.3_SpeciesData.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","pages":["index.qmd","page_SDM.1_DataPreparation.qmd"],"theme":"cosmo","toc-location":"left","page-layout":"full","code-copy":true,"title":"Species Data","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","pdf"]}