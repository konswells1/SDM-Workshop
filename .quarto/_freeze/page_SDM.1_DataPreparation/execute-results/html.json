{
  "hash": "c264cb4556d513600514d406813818bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preparation\"\nformat: html\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\n\n# Data preparation for the SDM workshop\n\nThis page documents the steps used to **download and save** the datasets used throughout the workshop.\\\nAll workshop pages will simply reload the saved `.RData` file to ensure reproducibility and avoid repeatedly downloading data from online sources (this helps with speed and reduces server load when 30+ students are running the same code *but* for actual research, always use the most up-to-date data!)).\n\n::: {.callout-note collapse=\"true\" icon=\"package\"}\n### Pre-saved data\n\nFor teaching efficiency, the workshop pages use **pre-saved datasets** stored in `/data/`.  \nThis ensures exercises run quickly and consistently without repeatedly downloading large files.\n\nIf you want to reproduce the full workflow, you can re-run the download and cropping steps.  \nBe aware that downloading global rasters and GBIF data may take several minutes.  \n\nFor full reproducibility, the data downloading steps are also documented below.\n\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"package\"}\n### Required R packages for the workshop\n\nMake sure the following packages are **installed and loaded** before proceeding. These will be used throughout the workshop:\n\n-   `terra` — for handling spatial raster and vector data\n-   `geodata` — provides easy access to global climate, topography, land cover and other raster datasets\n-   `sf` — for vector data in simple features format\n-   `rnaturalearth` — for country and world maps\n-   `rnaturalearthdata` — provides Natural Earth vector data (used with `rnaturalearth`)\n-   `spocc` — for accessing species occurrence data from multiple databases\n-   `rgbif` — for GBIF data queries\n-   `ggplot2` — for custom plotting\n-   `viridis` — for color palettes\n-   `tidyverse` — for data manipulation/formatting\n-   `leaflet` — for plotting interactive maps\n-   `CoordinateCleaner` — for cleaning species data\n-   `effects` — visualising model effects\n-   `ggcorrplot` — visualising correlation matrices\n-   `pROC` — analysing and visualising ROC curves\n-   `PresenceAbsence` — evaluating presence-absence model performance\n-   `ecospat` — spatial ecology and species distribution modeling tools\n\nYou can install any missing packages by running:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set CRAN mirror for non-interactive install\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\n# List of required packages\nrequired_packages <- c(\n  \"terra\", \"geodata\", \"sf\", \"raster\",\n  \"rnaturalearth\", \"rnaturalearthdata\",\n  \"spocc\", \"rgbif\", \"ggplot2\", \"viridis\", \"tidyverse\", \"dplyr\",\n  \"leaflet\", \"CoordinateCleaner\", \"effects\",\n  \"ggcorrplot\", \"caret\", \"pROC\", \"PresenceAbsence\", \"ecospat\",\n  \"mgcv\", \"dismo\", \"gbm\", \"randomForest\", \"maxnet\",\n  \"biomod2\", \"sdm\", \"ENMeval\"\n)\n\n# Identify missing packages\nmissing_packages <- required_packages[!(required_packages %in% rownames(installed.packages()))]\n\n# Install missing packages with dependencies\nif (length(missing_packages) > 0) {\n  suppressWarnings(suppressMessages(\n    install.packages(missing_packages, dependencies = TRUE, quiet = TRUE)\n  ))\n}\n\n# Load all required packages\ninvisible(lapply(required_packages, function(pkg) {\n  suppressWarnings(suppressMessages(\n    library(pkg, character.only = TRUE)\n  ))\n}))\n```\n:::\n\n:::\n\n<br>\n\n### 1. Basemaps\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load country boundaries for the entire world as an sf object\nWorld_sf <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Load the United Kingdom boundary as an sf object\nUK_sf <- ne_countries(scale = \"medium\", country = \"United Kingdom\", returnclass = \"sf\")\n\n# Load UK administrative regions (states/regions) as an sf object\nUK_admin_sf <- ne_states(country = \"United Kingdom\", returnclass = \"sf\")\n\n# Subset the UK administrative regions to only East Wales\nWalesEast_admin_sf <- UK_admin_sf[UK_admin_sf$region == \"East Wales\", ]\n```\n:::\n\n\n<br>\n\n### 2. Environmental data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download WorldClim data\nClim_extant <- geodata::worldclim_global(var = \"bio\", \n                                         res = 5, path = \"data/\")\n\nnames(Clim_extant) <- sub(\"^wc2.1_5m_\", \"\", names(Clim_extant))\n\n# Download elevation data\nElev_UK <- geodata::elevation_30s(country = \"GB\", path = \"data/\")\n\n# Crop climate to UK\nClim_UK <- terra::crop(Clim_extant, UK_sf)\n\n# Crop elevation to UK\nElev_UK <- terra::crop(Elev_UK, UK_sf)\n\n# Download bioclimatic variables for a future scenario\n# Example: CMIP6 data for SSP5-8.5, year 2060, GCM = BCC-CSM2-MR, resolution = 5 arc-min\n# Shared Socioeconomic Pathways (SSPs) code 126: refers to the \"Paris Agreement compatible\" pathway with:\n# SSP1: Sustainability (world shifts toward green growth, equity, and environmental awareness)\n# Radiative forcing stabilizes at 2.6 W/m² by 2100\nClim_cmip6_2041_2060 <- geodata::cmip6_world(var = \"bioc\", ssp = \"126\", model = \"BCC-CSM2-MR\", time = \"2041-2060\", \n                                             res = 5, path = \"data/\")\n\nnames(Clim_cmip6_2041_2060) <- gsub(\"^bio\", \"bio_\", names(Clim_cmip6_2041_2060))\n\n# Crop future climate to UK\nClim_cmip6_2041_2060_UK  <- terra::crop(Clim_extant, UK_sf)\n```\n:::\n\n\n<br>\n\n### 3. Species occurrence data from GBIF\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n####\n# Focal species for the SDM workshop\nspecies_name <- \"Rhinolophus hipposideros\"\nkey <- name_backbone(name = species_name)$speciesKey\n\nocc_data_rhinhipp <- occ_search(\n  taxonKey = key,\n  country = \"GB\",\n  hasCoordinate = TRUE,\n  limit = 2000\n)\n\nocc_df_rhinhipp <- occ_data_rhinhipp$data\n\n# Note the date when GBIF data were downloaded\nattr(occ_df_rhinhipp, \"gbif_download_date\") <- Sys.Date()\n\n\n####\n#  Target group species for species background data\n# Define target group (Chiroptera = bats)\nbat_taxon_key <- name_backbone(name = \"Chiroptera\")$usageKey\n\n# Download bat occurrence records from GBIF\nbat_occ <- rgbif::occ_search(\n  taxonKey = bat_taxon_key,\n  country = \"GB\",\n  hasCoordinate = TRUE,\n  limit = 10000  # increase if needed, but beware GBIF limits\n)\n\n# Extract data\nbat_df <- bat_occ$data\n\n# Remove records for the focal species (Rhinolophus hipposideros)\ntarget_group_df <- bat_df %>%\n    # Select only the columns key, decimalLatitude, decimalLongitude\n  dplyr::select(species, key, decimalLatitude, decimalLongitude) %>%\n  # Remove records with missing coordinates\n  filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%\n  filter(!species %in% \"Rhinolophus hipposideros\") %>%\n  dplyr::select(species, decimalLatitude, decimalLongitude)\n\n# Note the date when GBIF data were downloaded\nattr(target_group_df, \"gbif_download_date\") <- Sys.Date()\n\n# Convert to sf object\ntarget_group_sf <- st_as_sf(\n  target_group_df,\n  coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n  crs = 4326\n)\n```\n:::\n\n\n## 4. Save datasets for reuse\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save vector and tabular data only\nsave(\n  World_sf, UK_sf, UK_admin_sf, WalesEast_admin_sf,\n  species_name, occ_df_rhinhipp, target_group_sf, \n  file = \"data/workshop_data.RData\"\n)\n\n# Save raster data separately as GeoTIFFs\nterra::writeRaster(Clim_UK, \"data/Clim_UK.tif\", overwrite = TRUE)\nterra::writeRaster(Elev_UK, \"data/Elev_UK.tif\", overwrite = TRUE)\nterra::writeRaster(Clim_cmip6_2041_2060_UK, \"data/Clim_cmip6_2041_2060_UK.tif\", overwrite = TRUE)\n```\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}