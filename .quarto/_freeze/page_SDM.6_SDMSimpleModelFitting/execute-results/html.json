{
  "hash": "9cdc183a6704927c6b2af8be9e5238d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simple model fitting\"\nformat: html\neditor: visual\ndraft: false\n---\n\n\n\n<br>\n\nWe now arrive at the core of species distribution modelling (SDM): **fitting the model**. Having prepared occurrence, background, and environmental data, this section introduces a foundational yet flexible approach — the **generalised linear model (GLM)** to estimate habitat suitability for *Rhinolophus hipposideros* across the UK.\n\nSDMs quantify relationships between observed species distributions and environmental predictors, then project these relationships in space or time to identify potentially suitable areas under current or future conditions. While numerous algorithms exist, including MaxEnt, Random Forest, Boosted Regression Trees, and ensemble methods — the choice of model should reflect the modelling objective: inference, spatial prediction, or forecasting (Zurell et al. 2020).\n\nGLMs, despite being statistically \"simpler\" than many machine learning alternatives, remain widely used because they are interpretable, computationally efficient, and well-suited to presence–background data. However, building meaningful SDMs still requires rigorous conceptualisation:\n\nAre the data spatially biased or autocorrelated?\n\nAre predictor variables collinear or ecologically redundant?\n\nIs the model too simple or overly complex?\n\nAre we modelling for understanding, mapping, or future projection?\n\nIn this session, we will fit a logistic regression model using key bioclimatic and topographic predictors. You will explore how to interpret model coefficients, predict across environmental space, and visualise suitability maps. This exercise lays the foundation for more advanced techniques — including model validation, spatial transfer, and ensembling, which we will explore in subsequent sessions.\n\nFor further background, see foundational SDM texts such as [Elith & Leathwick (2009)](https://www.annualreviews.org/content/journals/10.1146/annurev.ecolsys.110308.120159), and [Franklin (2010)](https://doi.org/10.1111/j.1472-4642.2010.00641.x), and methodological overviews and tutorials (e.g., [Zurell et al. 2020](https://doi.org/10.1111/ecog.04960), [Araújo et al. 2019)](https://www.science.org/doi/10.1126/sciadv.aat4858)).\n\n<br>\n\n::: {.callout-note collapse=\"true\" icon=\"info\"}\n### Model fitting is an iterative process\n\nWhile SDMs are often presented as a sequence of discrete steps — from data preparation to modelling and projection — the process is inherently iterative.\n\nFitting a model is rarely the endpoint. Often, model results reveal issues that require revisiting earlier decisions, such as:\n\nRe-examining environmental predictors (e.g., removing collinear or ecologically irrelevant variables)\n\nAdjusting background sampling to better reflect sampling bias\n\nFiltering or cleaning occurrence data more stringently\n\nRefining the study extent or resolution to match ecological realism\n\nEach modelling decision can influence not only model performance, but also ecological interpretation and predictive transferability. As such, iteration is not a failure — it's good modelling practice. Treat each round of model fitting as an opportunity to improve clarity, parsimony, and ecological relevance.\n\n📌 Think of model fitting not as a straight line, but as a feedback loop between conceptualisation, data, and interpretation.\n:::\n\n<br>\n\n## 1. Fit a basic binomial GLM (logistic regression)\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Illustration of presence–absence data for bats collected across forest stands differing in structure and rainfall. This figure conceptually represents how species distribution modelling (SDM) explores patterns of habitat suitability by linking species occurrence to environmental conditions. Scientific questions, such as 'Which environmental factors influence bat presence?', should guide the selection of predictors and model structure. These questions can be formalised using a generalised linear model (GLM), where presence–absence data are modelled as a function of habitat characteristics like forest type, or rainfall.](images/glm_illustration.jpg){#fig-glm-illustration width=632}\n:::\n:::\n\n\n<br>\n\n::: {.callout-note collapse=\"true\" title=\"GLM refresher: Logistic regression basics\"}\nBefore applying generalised linear models (GLMs) in species distribution modelling, let’s briefly revisit the fundamentals of logistic regression — the most common approach for modelling binary outcomes, such as species presence or absence.\n\nPresence–absence data are common in ecological and environmental research, but also in many other domains, such as infection status in epidemiology or success/failure in behavioural studies. Logistic regression models the **probability** of an event (e.g., species presence) as a function of one or more predictors, using a logit link function to map probabilities to the real line.\n\nTo illustrate, we begin with a simple example — random presence–absence data simulated as Bernoulli trials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Draw random binary outcomes (e.g., 10% chance of presence)\ny <- rbinom(50, 1, 0.1)\n\n# Observed mean presence probability\nmu_y <- mean(y)\nmu_y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1\n```\n\n\n:::\n:::\n\n\nThis observed mean can be estimated with a logistic regression model. A model with no predictors is an intercept-only model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Intercept-only GLM\nmod <- glm(y ~ 1, family = \"binomial\")\n\n# Inspect design matrix (only intercept)\nmodel.matrix(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   (Intercept)\n1            1\n2            1\n3            1\n4            1\n5            1\n6            1\n7            1\n8            1\n9            1\n10           1\n11           1\n12           1\n13           1\n14           1\n15           1\n16           1\n17           1\n18           1\n19           1\n20           1\n21           1\n22           1\n23           1\n24           1\n25           1\n26           1\n27           1\n28           1\n29           1\n30           1\n31           1\n32           1\n33           1\n34           1\n35           1\n36           1\n37           1\n38           1\n39           1\n40           1\n41           1\n42           1\n43           1\n44           1\n45           1\n46           1\n47           1\n48           1\n49           1\n50           1\nattr(,\"assign\")\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Model summary\nsummary(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = y ~ 1, family = \"binomial\")\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -2.1972     0.4714  -4.661 3.14e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 32.508  on 49  degrees of freedom\nResidual deviance: 32.508  on 49  degrees of freedom\nAIC: 34.508\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n:::\n\n\nBecause logistic regression uses the logit link, model coefficients are on the log-odds scale. To convert to probabilities, we apply the inverse-logit (or logistic) function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define inverse logit function\ninvlogit <- function(x) { exp(x) / (1 + exp(x)) }\n\n# Estimate mean probability from model\nmu_mod <- invlogit(coef(mod))\nmu_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept) \n        0.1 \n```\n\n\n:::\n:::\n\n\nThis simple model demonstrates how GLMs estimate the expected occurrence probability of a binary outcome. Understanding this structure is essential for interpreting more complex SDMs where environmental covariates explain spatial patterns in species occurrence.\n\nWe now move on to fitting such models using actual species and environmental data.\n:::\n\n### 1.1 Fitting the first GLM: a single environmental predictor\n\nWe now fit our first statistical species distribution model: a **generalised linear model (GLM)** with a **logit link** function and a **binomial error distribution**.\n\nGeneralised linear models (GLMs) extend ordinary least squares regression by allowing response variables with non-normal distributions and by using link functions to relate the expected value of the response to a linear combination of predictors. In our case:\n\n-   **Response variable**: species occurrence (`pa`, 1 = presence, 0 = pseudo-absence)\\\n-   **Predictor**: one environmental covariate (here, `elevation`)\\\n-   **Model family**: `binomial` with `logit` link (logistic regression, applicable to a binary response variable)\n\nThis simple model quantifies how occurrence probability of *Rhinolophus hipposideros* varies along an environmental gradient.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make sure sdm_df_clean$pa contains 0/1 numeric values, not factors\nsdm_df_clean$pa <- as.numeric(sdm_df_clean$pa == 1)\n\n# Fit logistic regression with elevation as the only predictor\nglm_elev <- glm(pa ~ elevation,\n                data = sdm_df_clean,\n                family = binomial(link = \"logit\"))\n\nsummary(glm_elev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = pa ~ elevation, family = binomial(link = \"logit\"), \n    data = sdm_df_clean)\n\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)\n(Intercept)  0.0194626  0.1323770   0.147    0.883\nelevation   -0.0005446  0.0006553  -0.831    0.406\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 915.54  on 660  degrees of freedom\nResidual deviance: 914.85  on 659  degrees of freedom\nAIC: 918.85\n\nNumber of Fisher Scoring iterations: 3\n```\n\n\n:::\n:::\n\n\nThe coefficients from a logistic regression are expressed on the log-odds scale. The intercept can be transformed with the logistic (inverse-logit) function to give the baseline probability of occurrence (at predictor = 0). For slope terms, exponentiation (exp()) gives the odds ratio associated with a one-unit change in the predictor, rather than a direct probability\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define inverse logit\ninvlogit <- function(x) exp(x) / (1 + exp(x))\n\n# Convert intercept to probability\ninvlogit(coef(glm_elev)[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept) \n  0.5048655 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Odds ratio for 1-unit change in elevation\nexp(coef(glm_elev)[\"elevation\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nelevation \n0.9994556 \n```\n\n\n:::\n:::\n\n\nVisualising the fitted response curve\n\nTo make the model more intuitive, we can plot the observed data and overlay the fitted probability curve.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Generate prediction grid\nelev_seq <- data.frame(elevation = seq(min(sdm_df_clean$elevation, na.rm = TRUE),\n                                       max(sdm_df_clean$elevation, na.rm = TRUE),\n                                       length.out = 200))\n\n# Predict occurrence probability\nelev_seq$pred_prob <- predict(glm_elev, newdata = elev_seq, type = \"response\")\n\n# Plot data + fitted curve\nggplot(sdm_df_clean, aes(x = elevation, y = pa)) +\n  geom_jitter(height = 0.05, alpha = 0.3, colour = \"darkblue\") +\n  geom_line(data = elev_seq, aes(x = elevation, y = pred_prob),\n            colour = \"firebrick\", linewidth = 1.2) +\n  labs(x = \"Elevation (m)\",\n       y = \"Habitat suitability (scaled 0–1)\",\n       title = \"GLM with elevation as predictor\") +\n  theme_minimal(base_size = 14)\n```\n\n::: {.cell-output-display}\n![Relationship between elevation and probability of occurrence for *R. hipposideros* under a logistic regression model.](page_SDM.6_SDMSimpleModelFitting_files/figure-html/fig-glm-elev-1.png){#fig-glm-elev fig-align='center' width=70%}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"Interpreting the elevation-only GLM\"}\nA positive slope means that the relative probability of occurrence increases with elevation.\n\nA negative slope means that the relative probability of occurrence decreases with elevation.\n\nThe intercept reflects the baseline log-odds, here at elevation = 0. Note that interpreting the intercept assumes a meaningful value at 'elevation = 0', which may be outside the observed range. It is often better to center predictors (e.g., subtract mean elevation or use the 'scale()' function for scaling all variables) for interpretability.\n\nWhile simple, this first GLM illustrates the core mechanics of SDMs: linking species occurrence data to environmental gradients. However, **because we use presence–pseudoabsence data, the fitted values should not be interpreted as absolute occurrence probabilities** — the number of background points (the “zeros”) is arbitrary. Instead, model outputs represent relative suitability across the environmental gradient.\n\nIn practice, species–environment relationships are often non-linear, motivating the use of transformations (e.g. quadratic terms) or more flexible algorithms.\n:::\n\n<br>\n\n### 1.2 Extending the GLM: quadratic response curve\n\nSpecies–environment relationships are often non-linear: too cold or too hot, too wet or too dry. A quadratic term allows us to capture such unimodal responses.\n\nWe use the poly() function in R, which orthogonalises polynomial terms to reduce collinearity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit logistic regression with 2nd order polynomial for elevation\nglm_elev_poly <- glm(pa ~ poly(elevation, 2),\n                     data = sdm_df_clean,\n                     family = binomial(link = \"logit\"))\n\nsummary(glm_elev_poly)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = pa ~ poly(elevation, 2), family = binomial(link = \"logit\"), \n    data = sdm_df_clean)\n\nCoefficients:\n                     Estimate Std. Error z value Pr(>|z|)    \n(Intercept)          -0.11888    0.08196  -1.450   0.1469    \npoly(elevation, 2)1  -6.26886    2.76314  -2.269   0.0233 *  \npoly(elevation, 2)2 -18.28766    3.49749  -5.229 1.71e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 915.54  on 660  degrees of freedom\nResidual deviance: 877.43  on 658  degrees of freedom\nAIC: 883.43\n\nNumber of Fisher Scoring iterations: 5\n```\n\n\n:::\n:::\n\n\n**Visualising the quadratic response**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Predict occurrence probability for elevation range\nelev_seq$pred_prob_poly <- predict(glm_elev_poly,\n                                   newdata = elev_seq,\n                                   type = \"response\")\n\n# Plot linear vs quadratic fits\nggplot(sdm_df_clean, aes(x = elevation, y = pa)) +\n  geom_jitter(height = 0.05, alpha = 0.3, colour = \"darkblue\") +\n  geom_line(data = elev_seq, aes(x = elevation, y = pred_prob),\n            colour = \"firebrick\", linewidth = 1.1, linetype = \"dashed\") +\n  geom_line(data = elev_seq, aes(x = elevation, y = pred_prob_poly),\n            colour = \"forestgreen\", linewidth = 1.2) +\n  labs(x = \"Elevation (m)\",\n       y = \"Habitat suitability (scaled 0–1)\",\n       title = \"GLM with linear vs quadratic elevation effect\") +\n  theme_minimal(base_size = 14)\n```\n\n::: {.cell-output-display}\n![Quadratic logistic regression showing unimodal response of *R. hipposideros* to elevation.](page_SDM.6_SDMSimpleModelFitting_files/figure-html/fig-glm-elev-poly-1.png){#fig-glm-elev-poly fig-align='center' width=70%}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"Why quadratic terms matter\"}\nMany ecological responses are unimodal (species thrive at intermediate values).\n\nQuadratic GLMs provide a simple way to capture these shapes while retaining interpretability.\n\nLater, we will compare models formally using AIC or cross-validation to assess whether the quadratic term improves predictive performance.\n:::\n\n<br>\n\n### 1.3 GLMs with multiple predictors\n\nWhile single-variable models are useful for learning, most species distributions are shaped by multiple interacting environmental drivers. Extending GLMs to include several predictors allows us to capture more realistic ecological responses.\n\nKey considerations for multivariable GLMs:\n\n**Ecological relevance**: Select predictors based on natural history knowledge (e.g., bats depend on both climate and topography, not just elevation).\n\n**Multicollinearity**: strongly correlated predictors inflate variance and obscure interpretation. Tools like variance inflation factor (VIF), pairwise correlation checks, or principal component analysis (PCA) help diagnose and reduce collinearity.\n\n**Scaling and centering**: standardising continuous predictors (e.g., scale()) improves interpretability and numerical stability.\n\n**Interactions**: consider biologically plausible interactions (e.g., the effect of temperature may depend on rainfall).\n\n**Interpretation**: each coefficient reflects the effect of a predictor while holding the others constant.\n\n<br>\n\n::: {.callout-tip collapse=\"true\" icon=\"bar-chart\"}\n### Checking correlation among predictors and variable selection\n\nBefore fitting multivariable GLMs, it is crucial to examine correlations among predictors. Highly correlated variables can inflate standard errors, obscure interpretation, and lead to unstable models.\n\n**Step 1: Compute correlations**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(corrr)\nlibrary(ggplot2)\nlibrary(ggcorrplot)\n\n# Select environmental predictors\nenv_vars <- sdm_df_clean %>%\n  dplyr::select(starts_with(\"bio_\"), elevation)\n\n# Compute correlation matrix\ncor_matrix <- correlate(env_vars)\n\n# Stretch to long format\ncor_long <- stretch(cor_matrix)  # columns: x, y, r\n\n# Visualise correlation matrix directly\nggcorrplot::ggcorrplot(cor(env_vars, use = \"pairwise.complete.obs\"),\n                       hc.order = TRUE,\n                       type = \"lower\",\n                       lab = TRUE,\n                       lab_size = 3,\n                       method = \"circle\",\n                       colors = c(\"blue\", \"white\", \"red\"),\n                       title = \"Pairwise correlations among predictors\")\n```\n\n::: {.cell-output-display}\n![](page_SDM.6_SDMSimpleModelFitting_files/figure-html/corr-predictors-1.png){width=672}\n:::\n:::\n\n\n**Step 2: Identify highly correlated pairs**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Threshold for \"high correlation\"\nhigh_corr_thresh <- 0.7\n\n# Find pairs above threshold\nhigh_corr_pairs <- cor(env_vars, use = \"pairwise.complete.obs\") %>%\n  as.data.frame() %>%\n  rownames_to_column(\"var1\") %>%\n  tidyr::pivot_longer(-var1, names_to = \"var2\", values_to = \"r\") %>%\n  filter(abs(r) > high_corr_thresh & var1 != var2)\n\nhigh_corr_pairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 140 × 3\n   var1  var2           r\n   <chr> <chr>      <dbl>\n 1 bio_1 bio_5      0.808\n 2 bio_1 bio_6      0.862\n 3 bio_1 bio_10     0.949\n 4 bio_1 bio_11     0.939\n 5 bio_1 bio_14    -0.704\n 6 bio_1 elevation -0.798\n 7 bio_2 bio_4      0.790\n 8 bio_2 bio_5      0.710\n 9 bio_2 bio_7      0.930\n10 bio_2 bio_15    -0.734\n# ℹ 130 more rows\n```\n\n\n:::\n:::\n\n\n**Step 3: Decide which variables to keep**\n\nSeveral strategies exist:\n\nPrior knowledge: Retain ecologically relevant variables.\n\nUnivariate model importance: Fit GLMs individually and rank by AIC or explained deviance.\n\nAutomated selection: Dormann et al. (2013) suggest removing the variable with lower univariate importance from each highly correlated pair.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: compute AIC for univariate GLMs\nuniv_aic <- sapply(names(env_vars), function(v) {\n  mod <- glm(pa ~ ., data = cbind(pa = sdm_df_clean$pa, env_vars[v]), family = binomial)\n  AIC(mod)\n})\n\ntibble(variable = names(univ_aic), AIC = univ_aic) %>%\n  arrange(AIC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 2\n   variable    AIC\n   <chr>     <dbl>\n 1 bio_11     822.\n 2 bio_9      825.\n 3 bio_1      832.\n 4 bio_6      847.\n 5 bio_10     855.\n 6 bio_5      879.\n 7 bio_18     910.\n 8 bio_12     911.\n 9 bio_13     912.\n10 bio_3      912.\n11 bio_8      912.\n12 bio_19     913.\n13 bio_16     913.\n14 bio_14     913.\n15 bio_17     916.\n16 bio_7      918.\n17 elevation  919.\n18 bio_15     919.\n19 bio_2      920.\n20 bio_4      920.\n```\n\n\n:::\n:::\n\n\n**Step 4: Reduce predictors for multivariable GLM**\n\nAfter filtering for highly correlated variables and assessing univariate importance, we retain only the most relevant and weakly correlated predictors - here, bio_1 (annual mean temperature), bio_12 (annual precipitation), and elevation. This approach improves model interpretability, reduces the risk of overfitting, and ensures that the number of parameters aligns with recommended sample sizes per parameter (Guisan et al., 2017).\n:::\n\n##### Example: GLM with elevation and climate variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit logistic regression with multiple predictors\nglm_multi_1 <- glm(pa ~ elevation + bio_1 + bio_12,\n                 data = sdm_df_clean,\n                 family = binomial)\n\n# Alternatively, fit logistic regression with multiple predictors as polynomial terms\nglm_multi <- glm(pa ~ poly(elevation, 2) + poly(bio_1, 2) + poly(bio_12, 2),\n                 data = sdm_df_clean,\n                 family = binomial)\n\nsummary(glm_multi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = pa ~ poly(elevation, 2) + poly(bio_1, 2) + poly(bio_12, \n    2), family = binomial, data = sdm_df_clean)\n\nCoefficients:\n                    Estimate Std. Error z value Pr(>|z|)    \n(Intercept)          -1.6453     0.2649  -6.211 5.28e-10 ***\npoly(elevation, 2)1  89.4801    12.0552   7.423 1.15e-13 ***\npoly(elevation, 2)2  33.3148     8.9698   3.714 0.000204 ***\npoly(bio_1, 2)1     125.6396    16.4834   7.622 2.49e-14 ***\npoly(bio_1, 2)2     -61.5547    11.4366  -5.382 7.36e-08 ***\npoly(bio_12, 2)1    -74.7509    14.6844  -5.091 3.57e-07 ***\npoly(bio_12, 2)2    -71.1143    11.6026  -6.129 8.83e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 915.54  on 660  degrees of freedom\nResidual deviance: 596.72  on 654  degrees of freedom\nAIC: 610.72\n\nNumber of Fisher Scoring iterations: 7\n```\n\n\n:::\n:::\n\n\nHere we included:\n\nelevation (topographic constraint)\n\nbio_1: annual mean temperature,\n\nbio_12: annual precipitation.\n\nThis model allows us to examine how bats respond jointly to climate and topography.\n\n##### Visualising effects\n\nFor models with several predictors, it is often more useful to visualise marginal effects rather than raw coefficients:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package for partial effects\nlibrary(effects)\n\n# Plot marginal effect of each predictor\nplot(allEffects(glm_multi))\n```\n\n::: {.cell-output-display}\n![](page_SDM.6_SDMSimpleModelFitting_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nAlternatively, response curves can be generated by varying one predictor while holding others at their mean or median.\n\n**Interpretation caveats:**\n\nWith presence–pseudoabsence data, predicted values remain relative suitability, not absolute probabilities.\n\nIncluding too many predictors risks overfitting. Use model selection (AIC, cross-validation) or regularisation methods to avoid this.\n\nAlways check whether fitted responses make ecological sense, not just statistical sense.\n\n### 1.4 Model diagnostics\n\nAfter fitting a GLM, it is essential to evaluate its performance and understand how well it captures species–environment relationships. Key diagnostics include **deviance, pseudo-R², and effect plots**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform stepwise variable selection (forward/backward/both based on AIC)\nglm_step <- step(glm_multi, direction = \"both\", trace = FALSE)\n\n# Inspect selected model\nsummary(glm_step)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = pa ~ poly(elevation, 2) + poly(bio_1, 2) + poly(bio_12, \n    2), family = binomial, data = sdm_df_clean)\n\nCoefficients:\n                    Estimate Std. Error z value Pr(>|z|)    \n(Intercept)          -1.6453     0.2649  -6.211 5.28e-10 ***\npoly(elevation, 2)1  89.4801    12.0552   7.423 1.15e-13 ***\npoly(elevation, 2)2  33.3148     8.9698   3.714 0.000204 ***\npoly(bio_1, 2)1     125.6396    16.4834   7.622 2.49e-14 ***\npoly(bio_1, 2)2     -61.5547    11.4366  -5.382 7.36e-08 ***\npoly(bio_12, 2)1    -74.7509    14.6844  -5.091 3.57e-07 ***\npoly(bio_12, 2)2    -71.1143    11.6026  -6.129 8.83e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 915.54  on 660  degrees of freedom\nResidual deviance: 596.72  on 654  degrees of freedom\nAIC: 610.72\n\nNumber of Fisher Scoring iterations: 7\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Compute diagnostics on selected model\ncat(\"Residual deviance:\", glm_step$deviance, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResidual deviance: 596.7221 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Null deviance:\", glm_step$null.deviance, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNull deviance: 915.5401 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"AIC:\", AIC(glm_step), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAIC: 610.7221 \n```\n\n\n:::\n\n```{.r .cell-code}\n# McFadden's pseudo-R²\npseudo_r2 <- 1 - glm_step$deviance / glm_step$null.deviance\ncat(\"McFadden's pseudo-R²:\", pseudo_r2, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMcFadden's pseudo-R²: 0.3482294 \n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\" icon=\"info\"}\n### Interpreting relative suitability\n\nWhen using presence–pseudoabsence or presence–background data, the predicted values from a logistic regression GLM do **not represent true occurrence probabilities**. Instead, they provide a **relative measure of habitat suitability** along environmental gradients.\n\nKey points to remember:\n\n-   Higher predicted values indicate more suitable conditions relative to other locations in the study area.\n-   The absolute scale depends on the ratio of presences to pseudo-absences or background points.\n-   Avoid interpreting predictions as exact probabilities of occurrence in the field.\n:::\n\n<br>\n\n::: {.callout-tip collapse=\"true\" icon=\"light-bulb\"}\n### Other SDM approaches: machine learning and advanced methods\n\nWhile GLMs offer interpretable models, many modern SDM studies use **machine learning (ML) algorithms** to capture complex, non-linear relationships and interactions among predictors. Common approaches include:\n\n-   **MaxEnt** – Uses presence-only data with background points; widely used for species distribution modelling.\\\n-   **Random Forests (RF)** – Ensemble of decision trees; handles non-linearities and interactions automatically.\\\n-   **Boosted Regression Trees (BRT / GBM)** – Sequential ensemble of weak learners to improve predictive performance.\n\nThese methods are particularly useful when ecological responses are complex or highly non-linear. They complement GLMs and will be explored further in the **“SDM Ensemble Models”** section.\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"info\"}\n### Exercises: Building and evaluating species–environment models\n\n1.  **Compare linear vs quadratic responses:**\\\n    Using the same species dataset, fit two GLMs: one with a single linear predictor (e.g., bio_1) and another with a second-order polynomial (poly(bio_1, 2)). Visualise both fits and compare their AIC values and response curves. Which model better captures the ecological response?\n\n2.  **Fit multivariable GLMs and assess collinearity:**\\\n    Select 4–5 bioclimatic and topographic predictors. Compute their pairwise correlation matrix, identify highly correlated pairs (e.g., \\|r\\| \\> 0.7), and remove or justify the inclusion of collinear variables. Fit a multivariable GLM and interpret the model coefficients and pseudo-R².\n\n3.  **Model with and without scaled predictors:**\\\n    Refit a GLM using 'scale()' to standardise all continuous predictors. Compare the resulting coefficients and diagnostic metrics with the unscaled model. Discuss how scaling affects interpretability, model convergence, and numerical stability, especially in models with interaction or quadratic terms.\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"lightbulb\"}\n### Literature\n\nAraújo, M.B., Anderson, R.P., Márcia Barbosa, A., Beale, C.M., Dormann, C.F., Early, R., Garcia, R.A., Guisan, A., Maiorano, L., Naimi, B., O’Hara, R.B., Zimmermann, N.E. & Rahbek, C. (2019). **Standards for distribution models in biodiversity assessments.** *Science Advances*, 5(1), eaat4858. [doi:10.1126/sciadv.aat4858](https://doi.org/10.1126/sciadv.aat4858)\n\nElith, J., & Leathwick, J. R. (2009). **Species distribution models: ecological explanation and prediction across space and time.** *Annual Review of Ecology Evolution and Systematics*, 40, 677–697. [doi:10.1146/annurev.ecolsys.110308.120159](https://doi.org/10.1146/annurev.ecolsys.110308.120159)\n\nFranklin, J. (2010). **Moving beyond static species distribution models in support of conservation biogeography.** *Diversity and Distributions*, 16(3), 321–330. \\]doi:10.1111/j.1472-4642.2010.00641.x\\](https://doi.org/10.1111/j.1472-4642.2010.00641.x)\n\nZurell, D., Franklin, J., König, C., Bouchet, P.J., Dormann, C.F., Elith, J., Fandos, G., Feng, X., Guillera-Arroita, G., Guisan, A., Lahoz-Monfort, J.J., Leitão, P.J., Park, D.S., Peterson, A.T., Rapacciuolo, G., Schmatz, D.R., Schröder, B., Serra-Diaz, J.M., Thuiller, W. Yates, Katherine L., Zimmermann, Niklaus E., Merow, C. (2020). **A standard protocol for reporting species distribution models.** *Ecography*, 43(9), 1261–1277. [doi:10.1111/ecog.04960](https://doi.org/10.1111/ecog.04960)\n:::\n",
    "supporting": [
      "page_SDM.6_SDMSimpleModelFitting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}